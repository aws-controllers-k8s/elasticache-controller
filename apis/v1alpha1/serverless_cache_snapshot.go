// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ServerlessCacheSnapshotSpec defines the desired state of ServerlessCacheSnapshot.
//
// The resource representing a serverless cache snapshot. Available for Valkey,
// Redis OSS and Serverless Memcached only.
type ServerlessCacheSnapshotSpec struct {

	// The ID of the KMS key used to encrypt the snapshot. Available for Valkey,
	// Redis OSS and Serverless Memcached only. Default: NULL
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	KMSKeyID  *string                                  `json:"kmsKeyID,omitempty"`
	KMSKeyRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"kmsKeyRef,omitempty"`
	// The name of an existing serverless cache. The snapshot is created from this
	// cache. Available for Valkey, Redis OSS and Serverless Memcached only.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	ServerlessCacheName *string                                  `json:"serverlessCacheName,omitempty"`
	ServerlessCacheRef  *ackv1alpha1.AWSResourceReferenceWrapper `json:"serverlessCacheRef,omitempty"`
	// The name for the snapshot being created. Must be unique for the customer
	// account. Available for Valkey, Redis OSS and Serverless Memcached only. Must
	// be between 1 and 255 characters.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	ServerlessCacheSnapshotName *string `json:"serverlessCacheSnapshotName"`
	// A list of tags to be added to the snapshot resource. A tag is a key-value
	// pair. Available for Valkey, Redis OSS and Serverless Memcached only.
	Tags []*Tag `json:"tags,omitempty"`
}

// ServerlessCacheSnapshotStatus defines the observed state of ServerlessCacheSnapshot
type ServerlessCacheSnapshotStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The total size of a serverless cache snapshot, in bytes. Available for Valkey,
	// Redis OSS and Serverless Memcached only.
	// +kubebuilder:validation:Optional
	BytesUsedForCache *string `json:"bytesUsedForCache,omitempty"`
	// The date and time that the source serverless cache's metadata and cache data
	// set was obtained for the snapshot. Available for Valkey, Redis OSS and Serverless
	// Memcached only.
	// +kubebuilder:validation:Optional
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	// The time that the serverless cache snapshot will expire. Available for Valkey,
	// Redis OSS and Serverless Memcached only.
	// +kubebuilder:validation:Optional
	ExpiryTime *metav1.Time `json:"expiryTime,omitempty"`
	// The configuration of the serverless cache, at the time the snapshot was taken.
	// Available for Valkey, Redis OSS and Serverless Memcached only.
	// +kubebuilder:validation:Optional
	ServerlessCacheConfiguration *ServerlessCacheConfiguration `json:"serverlessCacheConfiguration,omitempty"`
	// The type of snapshot of serverless cache. Available for Valkey, Redis OSS
	// and Serverless Memcached only.
	// +kubebuilder:validation:Optional
	SnapshotType *string `json:"snapshotType,omitempty"`
	// The current status of the serverless cache. Available for Valkey, Redis OSS
	// and Serverless Memcached only.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// ServerlessCacheSnapshot is the Schema for the ServerlessCacheSnapshots API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="STATUS",type=string,priority=0,JSONPath=`.status.status`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",priority=0,JSONPath=".metadata.creationTimestamp"
type ServerlessCacheSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerlessCacheSnapshotSpec   `json:"spec,omitempty"`
	Status            ServerlessCacheSnapshotStatus `json:"status,omitempty"`
}

// ServerlessCacheSnapshotList contains a list of ServerlessCacheSnapshot
// +kubebuilder:object:root=true
type ServerlessCacheSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerlessCacheSnapshot `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ServerlessCacheSnapshot{}, &ServerlessCacheSnapshotList{})
}
