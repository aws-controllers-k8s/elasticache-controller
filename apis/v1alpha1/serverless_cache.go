// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ServerlessCacheSpec defines the desired state of ServerlessCache.
//
// The resource representing a serverless cache.
type ServerlessCacheSpec struct {

// Sets the cache usage limits for storage and ElastiCache Processing Units
// for the cache.
CacheUsageLimits *CacheUsageLimits `json:"cacheUsageLimits,omitempty"`
// The daily time that snapshots will be created from the new serverless cache.
// By default this number is populated with 0, i.e. no snapshots will be created
// on an automatic daily basis. Available for Valkey, Redis OSS and Serverless
// Memcached only.
DailySnapshotTime *string `json:"dailySnapshotTime,omitempty"`
// User-provided description for the serverless cache. The default is NULL,
// i.e. if no description is provided then an empty string will be returned.
// The maximum length is 255 characters.
Description *string `json:"description,omitempty"`
// The name of the cache engine to be used for creating the serverless cache.
// +kubebuilder:validation:Required
Engine *string `json:"engine"`
// ARN of the customer managed key for encrypting the data at rest. If no KMS
// key is provided, a default service key is used.
KMSKeyID *string `json:"kmsKeyID,omitempty"`
// The version of the cache engine that will be used to create the serverless
// cache.
MajorEngineVersion *string `json:"majorEngineVersion,omitempty"`
// A list of the one or more VPC security groups to be associated with the serverless
// cache. The security group will authorize traffic access for the VPC end-point
// (private-link). If no other information is given this will be the VPCâ€™s
// Default Security Group that is associated with the cluster VPC end-point.
SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
SecurityGroupRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"securityGroupRefs,omitempty"`
// User-provided identifier for the serverless cache. This parameter is stored
// as a lowercase string.
// +kubebuilder:validation:Required
ServerlessCacheName *string `json:"serverlessCacheName"`
// The ARN(s) of the snapshot that the new serverless cache will be created
// from. Available for Valkey, Redis OSS and Serverless Memcached only.
SnapshotARNsToRestore []*string `json:"snapshotARNsToRestore,omitempty"`
// The number of snapshots that will be retained for the serverless cache that
// is being created. As new snapshots beyond this limit are added, the oldest
// snapshots will be deleted on a rolling basis. Available for Valkey, Redis
// OSS and Serverless Memcached only.
SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`
// A list of the identifiers of the subnets where the VPC endpoint for the serverless
// cache will be deployed. All the subnetIds must belong to the same VPC.
SubnetIDs []*string `json:"subnetIDs,omitempty"`
SubnetRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"subnetRefs,omitempty"`
// The list of tags (key, value) pairs to be added to the serverless cache resource.
// Default is NULL.
Tags []*Tag `json:"tags,omitempty"`
// The identifier of the UserGroup to be associated with the serverless cache.
// Available for Valkey and Redis OSS only. Default is NULL.
UserGroupID *string `json:"userGroupID,omitempty"`
}

// ServerlessCacheStatus defines the observed state of ServerlessCache
type ServerlessCacheStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// When the serverless cache was created.
	// +kubebuilder:validation:Optional
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	// +kubebuilder:validation:Optional
	Endpoint *Endpoint `json:"endpoint,omitempty"`
	// The name and version number of the engine the serverless cache is compatible
// with.
	// +kubebuilder:validation:Optional
	FullEngineVersion *string `json:"fullEngineVersion,omitempty"`
	// +kubebuilder:validation:Optional
	ReaderEndpoint *Endpoint `json:"readerEndpoint,omitempty"`
	// The current status of the serverless cache. The allowed values are CREATING,
// AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// ServerlessCache is the Schema for the ServerlessCaches API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="STATUS",type=string,priority=0,JSONPath=`.status.status`
// +kubebuilder:printcolumn:name="ENDPOINT",type=string,priority=0,JSONPath=`.status.endpoint.address`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",priority=0,JSONPath=".metadata.creationTimestamp"
type ServerlessCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   ServerlessCacheSpec   `json:"spec,omitempty"`
	Status ServerlessCacheStatus `json:"status,omitempty"`
}

// ServerlessCacheList contains a list of ServerlessCache
// +kubebuilder:object:root=true
type ServerlessCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []ServerlessCache `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ServerlessCache{}, &ServerlessCacheList{})
}