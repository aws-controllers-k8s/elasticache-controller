// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GlobalReplicationGroupSpec defines the desired state of GlobalReplicationGroup.
//
// Consists of a primary cluster that accepts writes and an associated secondary
// cluster that resides in a different Amazon region. The secondary cluster
// accepts only reads. The primary cluster automatically replicates updates
// to the secondary cluster.
//
//   - The GlobalReplicationGroupIdSuffix represents the name of the Global
//     datastore, which is what you use to associate a secondary cluster.
type GlobalReplicationGroupSpec struct {

	// Provides details of the Global datastore
	GlobalReplicationGroupDescription *string `json:"globalReplicationGroupDescription,omitempty"`
	// The suffix name of a Global datastore. Amazon ElastiCache automatically applies
	// a prefix to the Global datastore ID when it is created. Each Amazon Region
	// has its own prefix. For instance, a Global datastore ID created in the US-West-1
	// region will begin with "dsdfu" along with the suffix name you provide. The
	// suffix, combined with the auto-generated prefix, guarantees uniqueness of
	// the Global datastore name across multiple regions.
	//
	// For a full list of Amazon Regions and their respective Global datastore iD
	// prefixes, see Using the Amazon CLI with Global datastores (http://docs.aws.amazon.com/AmazonElastiCache/latest/dg/Redis-Global-Datastores-CLI.html).
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	GlobalReplicationGroupIDSuffix *string `json:"globalReplicationGroupIDSuffix"`
	// The name of the primary cluster that accepts writes and will replicate updates
	// to the secondary cluster.
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	PrimaryReplicationGroupID  *string                                  `json:"primaryReplicationGroupID,omitempty"`
	PrimaryReplicationGroupRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"primaryReplicationGroupRef,omitempty"`
}

// GlobalReplicationGroupStatus defines the observed state of GlobalReplicationGroup
type GlobalReplicationGroupStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// A flag that enables encryption at rest when set to true.
	//
	// You cannot modify the value of AtRestEncryptionEnabled after the replication
	// group is created. To enable encryption at rest on a replication group you
	// must set AtRestEncryptionEnabled to true when you create the replication
	// group.
	//
	// Required: Only available when creating a replication group in an Amazon VPC
	// using Redis OSS version 3.2.6, 4.x or later.
	// +kubebuilder:validation:Optional
	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`
	// A flag that enables using an AuthToken (password) when issuing Valkey or
	// Redis OSS commands.
	//
	// Default: false
	// +kubebuilder:validation:Optional
	AuthTokenEnabled *bool `json:"authTokenEnabled,omitempty"`
	// The cache node type of the Global datastore
	// +kubebuilder:validation:Optional
	CacheNodeType *string `json:"cacheNodeType,omitempty"`
	// A flag that indicates whether the Global datastore is cluster enabled.
	// +kubebuilder:validation:Optional
	ClusterEnabled *bool `json:"clusterEnabled,omitempty"`
	// The ElastiCache engine. For Valkey or Redis OSS only.
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty"`
	// The ElastiCache engine version.
	// +kubebuilder:validation:Optional
	EngineVersion *string `json:"engineVersion,omitempty"`
	// Indicates the slot configuration and global identifier for each slice group.
	// +kubebuilder:validation:Optional
	GlobalNodeGroups []*GlobalNodeGroup `json:"globalNodeGroups,omitempty"`
	// The name of the Global datastore
	// +kubebuilder:validation:Optional
	GlobalReplicationGroupID *string `json:"globalReplicationGroupID,omitempty"`
	// The replication groups that comprise the Global datastore.
	// +kubebuilder:validation:Optional
	Members []*GlobalReplicationGroupMember `json:"members,omitempty"`
	// The status of the Global datastore
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
	// A flag that enables in-transit encryption when set to true.
	//
	// Required: Only available when creating a replication group in an Amazon VPC
	// using Redis OSS version 3.2.6, 4.x or later.
	// +kubebuilder:validation:Optional
	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`
}

// GlobalReplicationGroup is the Schema for the GlobalReplicationGroups API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type GlobalReplicationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalReplicationGroupSpec   `json:"spec,omitempty"`
	Status            GlobalReplicationGroupStatus `json:"status,omitempty"`
}

// GlobalReplicationGroupList contains a list of GlobalReplicationGroup
// +kubebuilder:object:root=true
type GlobalReplicationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalReplicationGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GlobalReplicationGroup{}, &GlobalReplicationGroupList{})
}
