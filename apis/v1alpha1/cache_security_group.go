// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CacheSecurityGroupSpec defines the desired state of CacheSecurityGroup.
//
// Represents the output of one of the following operations:
// 
//    * AuthorizeCacheSecurityGroupIngress
// 
//    * CreateCacheSecurityGroup
// 
//    * RevokeCacheSecurityGroupIngress
type CacheSecurityGroupSpec struct {

// A name for the cache security group. This value is stored as a lowercase
// string.
// 
// Constraints: Must contain no more than 255 alphanumeric characters. Cannot
// be the word "Default".
// 
// Example: mysecuritygroup
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
// +kubebuilder:validation:Required
CacheSecurityGroupName *string `json:"cacheSecurityGroupName"`
// A description for the cache security group.
// +kubebuilder:validation:Required
Description *string `json:"description"`
// A list of tags to be added to this resource. A tag is a key-value pair. A
// tag key must be accompanied by a tag value, although null is accepted.
Tags []*Tag `json:"tags,omitempty"`
}

// CacheSecurityGroupStatus defines the observed state of CacheSecurityGroup
type CacheSecurityGroupStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// A list of Amazon EC2 security groups that are associated with this cache
// security group.
	// +kubebuilder:validation:Optional
	EC2SecurityGroups []*EC2SecurityGroup `json:"ec2SecurityGroups,omitempty"`
	// The Amazon account ID of the cache security group owner.
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerID,omitempty"`
}

// CacheSecurityGroup is the Schema for the CacheSecurityGroups API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type CacheSecurityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   CacheSecurityGroupSpec   `json:"spec,omitempty"`
	Status CacheSecurityGroupStatus `json:"status,omitempty"`
}

// CacheSecurityGroupList contains a list of CacheSecurityGroup
// +kubebuilder:object:root=true
type CacheSecurityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []CacheSecurityGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CacheSecurityGroup{}, &CacheSecurityGroupList{})
}