// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ReplicationGroupSpec defines the desired state of ReplicationGroup.
//
// Contains all of the attributes of a specific Redis replication group.
type ReplicationGroupSpec struct {

	// A flag that enables encryption at rest when set to true.
	//
	// You cannot modify the value of AtRestEncryptionEnabled after the replication
	// group is created. To enable encryption at rest on a replication group you
	// must set AtRestEncryptionEnabled to true when you create the replication
	// group.
	//
	// Required: Only available when creating a replication group in an Amazon VPC
	// using redis version 3.2.6, 4.x or later.
	//
	// Default: false
	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`
	// Reserved parameter. The password used to access a password protected server.
	//
	// AuthToken can be specified only on replication groups where TransitEncryptionEnabled
	// is true.
	//
	// For HIPAA compliance, you must specify TransitEncryptionEnabled as true,
	// an AuthToken, and a CacheSubnetGroup.
	//
	// Password constraints:
	//
	//   - Must be only printable ASCII characters.
	//
	//   - Must be at least 16 characters and no more than 128 characters in length.
	//
	//   - The only permitted printable special characters are !, &, #, $, ^, <,
	//     >, and -. Other printable special characters cannot be used in the AUTH
	//     token.
	//
	// For more information, see AUTH password (http://redis.io/commands/AUTH) at
	// http://redis.io/commands/AUTH.
	AuthToken *ackv1alpha1.SecretKeyReference `json:"authToken,omitempty"`
	// Specifies whether a read-only replica is automatically promoted to read/write
	// primary if the existing primary fails.
	//
	// AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled)
	// replication groups.
	//
	// Default: false
	AutomaticFailoverEnabled *bool `json:"automaticFailoverEnabled,omitempty"`
	// The compute and memory capacity of the nodes in the node group (shard).
	//
	// The following node types are supported by ElastiCache. Generally speaking,
	// the current generation types provide more memory and computational power
	// at lower cost when compared to their equivalent previous generation counterparts.
	//
	//   - General purpose: Current generation: M7g node types: cache.m7g.large,
	//     cache.m7g.xlarge, cache.m7g.2xlarge, cache.m7g.4xlarge, cache.m7g.8xlarge,
	//     cache.m7g.12xlarge, cache.m7g.16xlarge For region availability, see Supported
	//     Node Types (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion)
	//     M6g node types (available only for Redis engine version 5.0.6 onward and
	//     for Memcached engine version 1.5.16 onward): cache.m6g.large, cache.m6g.xlarge,
	//     cache.m6g.2xlarge, cache.m6g.4xlarge, cache.m6g.8xlarge, cache.m6g.12xlarge,
	//     cache.m6g.16xlarge M5 node types: cache.m5.large, cache.m5.xlarge, cache.m5.2xlarge,
	//     cache.m5.4xlarge, cache.m5.12xlarge, cache.m5.24xlarge M4 node types:
	//     cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge
	//     T4g node types (available only for Redis engine version 5.0.6 onward and
	//     Memcached engine version 1.5.16 onward): cache.t4g.micro, cache.t4g.small,
	//     cache.t4g.medium T3 node types: cache.t3.micro, cache.t3.small, cache.t3.medium
	//     T2 node types: cache.t2.micro, cache.t2.small, cache.t2.medium Previous
	//     generation: (not recommended. Existing clusters are still supported but
	//     creation of new clusters is not supported for these types.) T1 node types:
	//     cache.t1.micro M1 node types: cache.m1.small, cache.m1.medium, cache.m1.large,
	//     cache.m1.xlarge M3 node types: cache.m3.medium, cache.m3.large, cache.m3.xlarge,
	//     cache.m3.2xlarge
	//
	//   - Compute optimized: Previous generation: (not recommended. Existing clusters
	//     are still supported but creation of new clusters is not supported for
	//     these types.) C1 node types: cache.c1.xlarge
	//
	//   - Memory optimized: Current generation: R7g node types: cache.r7g.large,
	//     cache.r7g.xlarge, cache.r7g.2xlarge, cache.r7g.4xlarge, cache.r7g.8xlarge,
	//     cache.r7g.12xlarge, cache.r7g.16xlarge For region availability, see Supported
	//     Node Types (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion)
	//     R6g node types (available only for Redis engine version 5.0.6 onward and
	//     for Memcached engine version 1.5.16 onward): cache.r6g.large, cache.r6g.xlarge,
	//     cache.r6g.2xlarge, cache.r6g.4xlarge, cache.r6g.8xlarge, cache.r6g.12xlarge,
	//     cache.r6g.16xlarge R5 node types: cache.r5.large, cache.r5.xlarge, cache.r5.2xlarge,
	//     cache.r5.4xlarge, cache.r5.12xlarge, cache.r5.24xlarge R4 node types:
	//     cache.r4.large, cache.r4.xlarge, cache.r4.2xlarge, cache.r4.4xlarge, cache.r4.8xlarge,
	//     cache.r4.16xlarge Previous generation: (not recommended. Existing clusters
	//     are still supported but creation of new clusters is not supported for
	//     these types.) M2 node types: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge
	//     R3 node types: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge,
	//     cache.r3.8xlarge
	//
	// Additional node type info
	//
	//   - All current generation instance types are created in Amazon VPC by default.
	//
	//   - Redis append-only files (AOF) are not supported for T1 or T2 instances.
	//
	//   - Redis Multi-AZ with automatic failover is not supported on T1 instances.
	//
	//   - Redis configuration variables appendonly and appendfsync are not supported
	//     on Redis version 2.8.22 and later.
	CacheNodeType *string `json:"cacheNodeType,omitempty"`
	// The name of the parameter group to associate with this replication group.
	// If this argument is omitted, the default cache parameter group for the specified
	// engine is used.
	//
	// If you are running Redis version 3.2.4 or later, only one node group (shard),
	// and want to use a default parameter group, we recommend that you specify
	// the parameter group by name.
	//
	//   - To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.
	//
	//   - To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.
	CacheParameterGroupName *string                                  `json:"cacheParameterGroupName,omitempty"`
	CacheParameterGroupRef  *ackv1alpha1.AWSResourceReferenceWrapper `json:"cacheParameterGroupRef,omitempty"`
	// A list of cache security group names to associate with this replication group.
	CacheSecurityGroupNames []*string `json:"cacheSecurityGroupNames,omitempty"`
	// The name of the cache subnet group to be used for the replication group.
	//
	// If you're going to launch your cluster in an Amazon VPC, you need to create
	// a subnet group before you start creating a cluster. For more information,
	// see Subnets and Subnet Groups (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html).
	CacheSubnetGroupName *string                                  `json:"cacheSubnetGroupName,omitempty"`
	CacheSubnetGroupRef  *ackv1alpha1.AWSResourceReferenceWrapper `json:"cacheSubnetGroupRef,omitempty"`
	// Enables data tiering. Data tiering is only supported for replication groups
	// using the r6gd node type. This parameter must be set to true when using r6gd
	// nodes. For more information, see Data tiering (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
	DataTieringEnabled *bool `json:"dataTieringEnabled,omitempty"`
	// A user-created description for the replication group.
	// +kubebuilder:validation:Required
	Description *string `json:"description"`
	// The name of the cache engine to be used for the clusters in this replication
	// group. The value must be set to Redis.
	Engine *string `json:"engine,omitempty"`
	// The version number of the cache engine to be used for the clusters in this
	// replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions
	// operation.
	//
	// Important: You can upgrade to a newer engine version (see Selecting a Cache
	// Engine and Version (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement))
	// in the ElastiCache User Guide, but you cannot downgrade to an earlier engine
	// version. If you want to use an earlier engine version, you must delete the
	// existing cluster or replication group and create it anew with the earlier
	// engine version.
	EngineVersion *string `json:"engineVersion,omitempty"`
	// The ID of the KMS key used to encrypt the disk in the cluster.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// Specifies the destination, format and type of the logs.
	LogDeliveryConfigurations []*LogDeliveryConfigurationRequest `json:"logDeliveryConfigurations,omitempty"`
	// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance.
	// For more information, see Minimizing Downtime: Multi-AZ (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html).
	MultiAZEnabled *bool `json:"multiAZEnabled,omitempty"`
	// A list of node group (shard) configuration options. Each node group (shard)
	// configuration has the following members: PrimaryAvailabilityZone, ReplicaAvailabilityZones,
	// ReplicaCount, and Slots.
	//
	// If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode
	// enabled) replication group, you can use this parameter to individually configure
	// each node group (shard), or you can omit this parameter. However, it is required
	// when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You
	// must configure each node group (shard) using this parameter because you must
	// specify the slots for each node group.
	NodeGroupConfiguration []*NodeGroupConfiguration `json:"nodeGroupConfiguration,omitempty"`
	// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
	// (SNS) topic to which notifications are sent.
	//
	// The Amazon SNS topic owner must be the same as the cluster owner.
	NotificationTopicARN *string `json:"notificationTopicARN,omitempty"`
	// An optional parameter that specifies the number of node groups (shards) for
	// this Redis (cluster mode enabled) replication group. For Redis (cluster mode
	// disabled) either omit this parameter or set it to 1.
	//
	// Default: 1
	NumNodeGroups *int64 `json:"numNodeGroups,omitempty"`
	// The port number on which each member of the replication group accepts connections.
	Port *int64 `json:"port,omitempty"`
	// A list of EC2 Availability Zones in which the replication group's clusters
	// are created. The order of the Availability Zones in the list is the order
	// in which clusters are allocated. The primary cluster is created in the first
	// AZ in the list.
	//
	// This parameter is not used if there is more than one node group (shard).
	// You should use NodeGroupConfiguration instead.
	//
	// If you are creating your replication group in an Amazon VPC (recommended),
	// you can only locate clusters in Availability Zones associated with the subnets
	// in the selected subnet group.
	//
	// The number of Availability Zones listed must equal the value of NumCacheClusters.
	//
	// Default: system chosen Availability Zones.
	PreferredCacheClusterAZs []*string `json:"preferredCacheClusterAZs,omitempty"`
	// Specifies the weekly time range during which maintenance on the cluster is
	// performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid
	// values for ddd are:
	//
	// Specifies the weekly time range during which maintenance on the cluster is
	// performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period.
	//
	// Valid values for ddd are:
	//
	//   - sun
	//
	//   - mon
	//
	//   - tue
	//
	//   - wed
	//
	//   - thu
	//
	//   - fri
	//
	//   - sat
	//
	// Example: sun:23:00-mon:01:30
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// The identifier of the cluster that serves as the primary for this replication
	// group. This cluster must already exist and have a status of available.
	//
	// This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup
	// is specified.
	PrimaryClusterID *string `json:"primaryClusterID,omitempty"`
	// An optional parameter that specifies the number of replica nodes in each
	// node group (shard). Valid values are 0 to 5.
	ReplicasPerNodeGroup *int64 `json:"replicasPerNodeGroup,omitempty"`
	// The replication group identifier. This parameter is stored as a lowercase
	// string.
	//
	// Constraints:
	//
	//   - A name must contain from 1 to 40 alphanumeric characters or hyphens.
	//
	//   - The first character must be a letter.
	//
	//   - A name cannot end with a hyphen or contain two consecutive hyphens.
	//
	// +kubebuilder:validation:Required
	ReplicationGroupID *string `json:"replicationGroupID"`
	// One or more Amazon VPC security groups associated with this replication group.
	//
	// Use this parameter only when you are creating a replication group in an Amazon
	// Virtual Private Cloud (Amazon VPC).
	SecurityGroupIDs  []*string                                  `json:"securityGroupIDs,omitempty"`
	SecurityGroupRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"securityGroupRefs,omitempty"`
	// A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB
	// snapshot files stored in Amazon S3. The snapshot files are used to populate
	// the new replication group. The Amazon S3 object name in the ARN cannot contain
	// any commas. The new replication group will have the number of node groups
	// (console: shards) specified by the parameter NumNodeGroups or the number
	// of node groups configured by NodeGroupConfiguration regardless of the number
	// of ARNs specified here.
	//
	// Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb
	SnapshotARNs []*string `json:"snapshotARNs,omitempty"`
	// The name of a snapshot from which to restore data into the new replication
	// group. The snapshot status changes to restoring while the new replication
	// group is being created.
	SnapshotName *string `json:"snapshotName,omitempty"`
	// The number of days for which ElastiCache retains automatic snapshots before
	// deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot
	// that was taken today is retained for 5 days before being deleted.
	//
	// Default: 0 (i.e., automatic backups are disabled for this cluster).
	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`
	// The daily time range (in UTC) during which ElastiCache begins taking a daily
	// snapshot of your node group (shard).
	//
	// Example: 05:00-09:00
	//
	// If you do not specify this parameter, ElastiCache automatically chooses an
	// appropriate time range.
	SnapshotWindow *string `json:"snapshotWindow,omitempty"`
	// A list of tags to be added to this resource. Tags are comma-separated key,value
	// pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as
	// shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue.
	// Tags on replication groups will be replicated to all nodes.
	Tags []*Tag `json:"tags,omitempty"`
	// A flag that enables in-transit encryption when set to true.
	//
	// This parameter is valid only if the Engine parameter is redis, the EngineVersion
	// parameter is 3.2.6, 4.x or later, and the cluster is being created in an
	// Amazon VPC.
	//
	// If you enable in-transit encryption, you must also specify a value for CacheSubnetGroup.
	//
	// Required: Only available when creating a replication group in an Amazon VPC
	// using redis version 3.2.6, 4.x or later.
	//
	// Default: false
	//
	// For HIPAA compliance, you must specify TransitEncryptionEnabled as true,
	// an AuthToken, and a CacheSubnetGroup.
	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`
	// The user group to associate with the replication group.
	UserGroupIDs []*string `json:"userGroupIDs,omitempty"`
}

// ReplicationGroupStatus defines the observed state of ReplicationGroup
type ReplicationGroupStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// A string list, each element of which specifies a cache node type which you
	// can use to scale your cluster or replication group. When scaling down a Redis
	// cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup,
	// use a value from this list for the CacheNodeType parameter.
	// +kubebuilder:validation:Optional
	AllowedScaleDownModifications []*string `json:"allowedScaleDownModifications,omitempty"`
	// A string list, each element of which specifies a cache node type which you
	// can use to scale your cluster or replication group.
	//
	// When scaling up a Redis cluster or replication group using ModifyCacheCluster
	// or ModifyReplicationGroup, use a value from this list for the CacheNodeType
	// parameter.
	// +kubebuilder:validation:Optional
	AllowedScaleUpModifications []*string `json:"allowedScaleUpModifications,omitempty"`
	// A flag that enables using an AuthToken (password) when issuing Redis commands.
	//
	// Default: false
	// +kubebuilder:validation:Optional
	AuthTokenEnabled *bool `json:"authTokenEnabled,omitempty"`
	// The date the auth token was last modified
	// +kubebuilder:validation:Optional
	AuthTokenLastModifiedDate *metav1.Time `json:"authTokenLastModifiedDate,omitempty"`
	// If you are running Redis engine version 6.0 or later, set this parameter
	// to yes if you want to opt-in to the next auto minor version upgrade campaign.
	// This parameter is disabled for previous versions.
	// +kubebuilder:validation:Optional
	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty"`
	// Indicates the status of automatic failover for this Redis replication group.
	// +kubebuilder:validation:Optional
	AutomaticFailover *string `json:"automaticFailover,omitempty"`
	// A flag indicating whether or not this replication group is cluster enabled;
	// i.e., whether its data can be partitioned across multiple shards (API/CLI:
	// node groups).
	//
	// Valid values: true | false
	// +kubebuilder:validation:Optional
	ClusterEnabled *bool `json:"clusterEnabled,omitempty"`
	// The configuration endpoint for this replication group. Use the configuration
	// endpoint to connect to this replication group.
	// +kubebuilder:validation:Optional
	ConfigurationEndpoint *Endpoint `json:"configurationEndpoint,omitempty"`
	// Enables data tiering. Data tiering is only supported for replication groups
	// using the r6gd node type. This parameter must be set to true when using r6gd
	// nodes. For more information, see Data tiering (https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html).
	// +kubebuilder:validation:Optional
	DataTiering *string `json:"dataTiering,omitempty"`
	// A list of events. Each element in the list contains detailed information
	// about one event.
	// +kubebuilder:validation:Optional
	Events []*Event `json:"events,omitempty"`
	// The name of the Global datastore and role of this replication group in the
	// Global datastore.
	// +kubebuilder:validation:Optional
	GlobalReplicationGroupInfo *GlobalReplicationGroupInfo `json:"globalReplicationGroupInfo,omitempty"`
	// Returns the destination, format and type of the logs.
	// +kubebuilder:validation:Optional
	LogDeliveryConfigurations []*LogDeliveryConfiguration `json:"logDeliveryConfigurations,omitempty"`
	// The names of all the cache clusters that are part of this replication group.
	// +kubebuilder:validation:Optional
	MemberClusters []*string `json:"memberClusters,omitempty"`
	// The outpost ARNs of the replication group's member clusters.
	// +kubebuilder:validation:Optional
	MemberClustersOutpostARNs []*string `json:"memberClustersOutpostARNs,omitempty"`
	// A flag indicating if you have Multi-AZ enabled to enhance fault tolerance.
	// For more information, see Minimizing Downtime: Multi-AZ (http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html)
	// +kubebuilder:validation:Optional
	MultiAZ *string `json:"multiAZ,omitempty"`
	// A list of node groups in this replication group. For Redis (cluster mode
	// disabled) replication groups, this is a single-element list. For Redis (cluster
	// mode enabled) replication groups, the list contains an entry for each node
	// group (shard).
	// +kubebuilder:validation:Optional
	NodeGroups []*NodeGroup `json:"nodeGroups,omitempty"`
	// A group of settings to be applied to the replication group, either immediately
	// or during the next maintenance window.
	// +kubebuilder:validation:Optional
	PendingModifiedValues *ReplicationGroupPendingModifiedValues `json:"pendingModifiedValues,omitempty"`
	// The date and time when the cluster was created.
	// +kubebuilder:validation:Optional
	ReplicationGroupCreateTime *metav1.Time `json:"replicationGroupCreateTime,omitempty"`
	// The cluster ID that is used as the daily snapshot source for the replication
	// group.
	// +kubebuilder:validation:Optional
	SnapshottingClusterID *string `json:"snapshottingClusterID,omitempty"`
	// The current state of this replication group - creating, available, modifying,
	// deleting, create-failed, snapshotting.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty"`
}

// ReplicationGroup is the Schema for the ReplicationGroups API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type ReplicationGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationGroupSpec   `json:"spec,omitempty"`
	Status            ReplicationGroupStatus `json:"status,omitempty"`
}

// ReplicationGroupList contains a list of ReplicationGroup
// +kubebuilder:object:root=true
type ReplicationGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ReplicationGroup{}, &ReplicationGroupList{})
}
