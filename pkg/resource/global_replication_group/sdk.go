// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package global_replication_group

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/elasticache"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elasticache-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.GlobalReplicationGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeGlobalReplicationGroupsOutput
	resp, err = rm.sdkapi.DescribeGlobalReplicationGroups(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeGlobalReplicationGroups", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "GlobalReplicationGroupNotFoundFault" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.GlobalReplicationGroups {
		if elem.ARN != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ARN)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.AtRestEncryptionEnabled != nil {
			ko.Status.AtRestEncryptionEnabled = elem.AtRestEncryptionEnabled
		} else {
			ko.Status.AtRestEncryptionEnabled = nil
		}
		if elem.AuthTokenEnabled != nil {
			ko.Status.AuthTokenEnabled = elem.AuthTokenEnabled
		} else {
			ko.Status.AuthTokenEnabled = nil
		}
		if elem.CacheNodeType != nil {
			ko.Status.CacheNodeType = elem.CacheNodeType
		} else {
			ko.Status.CacheNodeType = nil
		}
		if elem.ClusterEnabled != nil {
			ko.Status.ClusterEnabled = elem.ClusterEnabled
		} else {
			ko.Status.ClusterEnabled = nil
		}
		if elem.Engine != nil {
			ko.Status.Engine = elem.Engine
		} else {
			ko.Status.Engine = nil
		}
		if elem.EngineVersion != nil {
			ko.Status.EngineVersion = elem.EngineVersion
		} else {
			ko.Status.EngineVersion = nil
		}
		if elem.GlobalNodeGroups != nil {
			f7 := []*svcapitypes.GlobalNodeGroup{}
			for _, f7iter := range elem.GlobalNodeGroups {
				f7elem := &svcapitypes.GlobalNodeGroup{}
				if f7iter.GlobalNodeGroupId != nil {
					f7elem.GlobalNodeGroupID = f7iter.GlobalNodeGroupId
				}
				if f7iter.Slots != nil {
					f7elem.Slots = f7iter.Slots
				}
				f7 = append(f7, f7elem)
			}
			ko.Status.GlobalNodeGroups = f7
		} else {
			ko.Status.GlobalNodeGroups = nil
		}
		if elem.GlobalReplicationGroupDescription != nil {
			ko.Spec.GlobalReplicationGroupDescription = elem.GlobalReplicationGroupDescription
		} else {
			ko.Spec.GlobalReplicationGroupDescription = nil
		}
		if elem.GlobalReplicationGroupId != nil {
			ko.Status.GlobalReplicationGroupID = elem.GlobalReplicationGroupId
		} else {
			ko.Status.GlobalReplicationGroupID = nil
		}
		if elem.Members != nil {
			f10 := []*svcapitypes.GlobalReplicationGroupMember{}
			for _, f10iter := range elem.Members {
				f10elem := &svcapitypes.GlobalReplicationGroupMember{}
				if f10iter.AutomaticFailover != "" {
					f10elem.AutomaticFailover = aws.String(string(f10iter.AutomaticFailover))
				}
				if f10iter.ReplicationGroupId != nil {
					f10elem.ReplicationGroupID = f10iter.ReplicationGroupId
				}
				if f10iter.ReplicationGroupRegion != nil {
					f10elem.ReplicationGroupRegion = f10iter.ReplicationGroupRegion
				}
				if f10iter.Role != nil {
					f10elem.Role = f10iter.Role
				}
				if f10iter.Status != nil {
					f10elem.Status = f10iter.Status
				}
				f10 = append(f10, f10elem)
			}
			ko.Status.Members = f10
		} else {
			ko.Status.Members = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.TransitEncryptionEnabled != nil {
			ko.Status.TransitEncryptionEnabled = elem.TransitEncryptionEnabled
		} else {
			ko.Status.TransitEncryptionEnabled = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Status.GlobalReplicationGroupID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeGlobalReplicationGroupsInput, error) {
	res := &svcsdk.DescribeGlobalReplicationGroupsInput{}

	if r.ko.Status.GlobalReplicationGroupID != nil {
		res.GlobalReplicationGroupId = r.ko.Status.GlobalReplicationGroupID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateGlobalReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.CreateGlobalReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateGlobalReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.GlobalReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.GlobalReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.GlobalReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Status.AtRestEncryptionEnabled = resp.GlobalReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Status.AtRestEncryptionEnabled = nil
	}
	if resp.GlobalReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.GlobalReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.GlobalReplicationGroup.CacheNodeType != nil {
		ko.Status.CacheNodeType = resp.GlobalReplicationGroup.CacheNodeType
	} else {
		ko.Status.CacheNodeType = nil
	}
	if resp.GlobalReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.GlobalReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.GlobalReplicationGroup.Engine != nil {
		ko.Status.Engine = resp.GlobalReplicationGroup.Engine
	} else {
		ko.Status.Engine = nil
	}
	if resp.GlobalReplicationGroup.EngineVersion != nil {
		ko.Status.EngineVersion = resp.GlobalReplicationGroup.EngineVersion
	} else {
		ko.Status.EngineVersion = nil
	}
	if resp.GlobalReplicationGroup.GlobalNodeGroups != nil {
		f7 := []*svcapitypes.GlobalNodeGroup{}
		for _, f7iter := range resp.GlobalReplicationGroup.GlobalNodeGroups {
			f7elem := &svcapitypes.GlobalNodeGroup{}
			if f7iter.GlobalNodeGroupId != nil {
				f7elem.GlobalNodeGroupID = f7iter.GlobalNodeGroupId
			}
			if f7iter.Slots != nil {
				f7elem.Slots = f7iter.Slots
			}
			f7 = append(f7, f7elem)
		}
		ko.Status.GlobalNodeGroups = f7
	} else {
		ko.Status.GlobalNodeGroups = nil
	}
	if resp.GlobalReplicationGroup.GlobalReplicationGroupDescription != nil {
		ko.Spec.GlobalReplicationGroupDescription = resp.GlobalReplicationGroup.GlobalReplicationGroupDescription
	} else {
		ko.Spec.GlobalReplicationGroupDescription = nil
	}
	if resp.GlobalReplicationGroup.GlobalReplicationGroupId != nil {
		ko.Status.GlobalReplicationGroupID = resp.GlobalReplicationGroup.GlobalReplicationGroupId
	} else {
		ko.Status.GlobalReplicationGroupID = nil
	}
	if resp.GlobalReplicationGroup.Members != nil {
		f10 := []*svcapitypes.GlobalReplicationGroupMember{}
		for _, f10iter := range resp.GlobalReplicationGroup.Members {
			f10elem := &svcapitypes.GlobalReplicationGroupMember{}
			if f10iter.AutomaticFailover != "" {
				f10elem.AutomaticFailover = aws.String(string(f10iter.AutomaticFailover))
			}
			if f10iter.ReplicationGroupId != nil {
				f10elem.ReplicationGroupID = f10iter.ReplicationGroupId
			}
			if f10iter.ReplicationGroupRegion != nil {
				f10elem.ReplicationGroupRegion = f10iter.ReplicationGroupRegion
			}
			if f10iter.Role != nil {
				f10elem.Role = f10iter.Role
			}
			if f10iter.Status != nil {
				f10elem.Status = f10iter.Status
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Members = f10
	} else {
		ko.Status.Members = nil
	}
	if resp.GlobalReplicationGroup.Status != nil {
		ko.Status.Status = resp.GlobalReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.GlobalReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Status.TransitEncryptionEnabled = resp.GlobalReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Status.TransitEncryptionEnabled = nil
	}

	rm.setStatusDefaults(ko)
	// Check if Tags are specified in the resource and mark the resource as
	// needing to be synced if so.
	if ko.Spec.Tags != nil {
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateGlobalReplicationGroupInput, error) {
	res := &svcsdk.CreateGlobalReplicationGroupInput{}

	if r.ko.Spec.GlobalReplicationGroupDescription != nil {
		res.GlobalReplicationGroupDescription = r.ko.Spec.GlobalReplicationGroupDescription
	}
	if r.ko.Spec.GlobalReplicationGroupIDSuffix != nil {
		res.GlobalReplicationGroupIdSuffix = r.ko.Spec.GlobalReplicationGroupIDSuffix
	}
	if r.ko.Spec.PrimaryReplicationGroupID != nil {
		res.PrimaryReplicationGroupId = r.ko.Spec.PrimaryReplicationGroupID
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	// If the Tags field has changed, sync the tags
	if delta.DifferentAt("Spec.Tags") {
		err := rm.syncTags(
			ctx,
			desired,
			latest,
		)
		if err != nil {
			return nil, err
		}
	}

	// If the only difference is in the Tags field, we don't need to make an update call
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.ModifyGlobalReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyGlobalReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyGlobalReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.GlobalReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.GlobalReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.GlobalReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Status.AtRestEncryptionEnabled = resp.GlobalReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Status.AtRestEncryptionEnabled = nil
	}
	if resp.GlobalReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.GlobalReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.GlobalReplicationGroup.CacheNodeType != nil {
		ko.Status.CacheNodeType = resp.GlobalReplicationGroup.CacheNodeType
	} else {
		ko.Status.CacheNodeType = nil
	}
	if resp.GlobalReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.GlobalReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.GlobalReplicationGroup.Engine != nil {
		ko.Status.Engine = resp.GlobalReplicationGroup.Engine
	} else {
		ko.Status.Engine = nil
	}
	if resp.GlobalReplicationGroup.EngineVersion != nil {
		ko.Status.EngineVersion = resp.GlobalReplicationGroup.EngineVersion
	} else {
		ko.Status.EngineVersion = nil
	}
	if resp.GlobalReplicationGroup.GlobalNodeGroups != nil {
		f7 := []*svcapitypes.GlobalNodeGroup{}
		for _, f7iter := range resp.GlobalReplicationGroup.GlobalNodeGroups {
			f7elem := &svcapitypes.GlobalNodeGroup{}
			if f7iter.GlobalNodeGroupId != nil {
				f7elem.GlobalNodeGroupID = f7iter.GlobalNodeGroupId
			}
			if f7iter.Slots != nil {
				f7elem.Slots = f7iter.Slots
			}
			f7 = append(f7, f7elem)
		}
		ko.Status.GlobalNodeGroups = f7
	} else {
		ko.Status.GlobalNodeGroups = nil
	}
	if resp.GlobalReplicationGroup.GlobalReplicationGroupDescription != nil {
		ko.Spec.GlobalReplicationGroupDescription = resp.GlobalReplicationGroup.GlobalReplicationGroupDescription
	} else {
		ko.Spec.GlobalReplicationGroupDescription = nil
	}
	if resp.GlobalReplicationGroup.GlobalReplicationGroupId != nil {
		ko.Status.GlobalReplicationGroupID = resp.GlobalReplicationGroup.GlobalReplicationGroupId
	} else {
		ko.Status.GlobalReplicationGroupID = nil
	}
	if resp.GlobalReplicationGroup.Members != nil {
		f10 := []*svcapitypes.GlobalReplicationGroupMember{}
		for _, f10iter := range resp.GlobalReplicationGroup.Members {
			f10elem := &svcapitypes.GlobalReplicationGroupMember{}
			if f10iter.AutomaticFailover != "" {
				f10elem.AutomaticFailover = aws.String(string(f10iter.AutomaticFailover))
			}
			if f10iter.ReplicationGroupId != nil {
				f10elem.ReplicationGroupID = f10iter.ReplicationGroupId
			}
			if f10iter.ReplicationGroupRegion != nil {
				f10elem.ReplicationGroupRegion = f10iter.ReplicationGroupRegion
			}
			if f10iter.Role != nil {
				f10elem.Role = f10iter.Role
			}
			if f10iter.Status != nil {
				f10elem.Status = f10iter.Status
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Members = f10
	} else {
		ko.Status.Members = nil
	}
	if resp.GlobalReplicationGroup.Status != nil {
		ko.Status.Status = resp.GlobalReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.GlobalReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Status.TransitEncryptionEnabled = resp.GlobalReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Status.TransitEncryptionEnabled = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyGlobalReplicationGroupInput, error) {
	res := &svcsdk.ModifyGlobalReplicationGroupInput{}

	res.ApplyImmediately = aws.Bool(true)
	if r.ko.Status.CacheNodeType != nil {
		res.CacheNodeType = r.ko.Status.CacheNodeType
	}
	if r.ko.Status.Engine != nil {
		res.Engine = r.ko.Status.Engine
	}
	if r.ko.Status.EngineVersion != nil {
		res.EngineVersion = r.ko.Status.EngineVersion
	}
	if r.ko.Spec.GlobalReplicationGroupDescription != nil {
		res.GlobalReplicationGroupDescription = r.ko.Spec.GlobalReplicationGroupDescription
	}
	if r.ko.Status.GlobalReplicationGroupID != nil {
		res.GlobalReplicationGroupId = r.ko.Status.GlobalReplicationGroupID
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteGlobalReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteGlobalReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteGlobalReplicationGroup", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteGlobalReplicationGroupInput, error) {
	res := &svcsdk.DeleteGlobalReplicationGroupInput{}

	if r.ko.Status.GlobalReplicationGroupID != nil {
		res.GlobalReplicationGroupId = r.ko.Status.GlobalReplicationGroupID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.GlobalReplicationGroup,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "GlobalReplicationGroupAlreadyExistsFault",
		"InvalidParameterValueException",
		"InvalidGlobalReplicationGroupStateFault",
		"ServiceLinkedRoleNotFoundFault":
		return true
	default:
		return false
	}
}
