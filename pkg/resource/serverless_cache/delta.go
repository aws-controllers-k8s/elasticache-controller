// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package serverless_cache

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits, b.ko.Spec.CacheUsageLimits) {
		delta.Add("Spec.CacheUsageLimits", a.ko.Spec.CacheUsageLimits, b.ko.Spec.CacheUsageLimits)
	} else if a.ko.Spec.CacheUsageLimits != nil && b.ko.Spec.CacheUsageLimits != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.DataStorage, b.ko.Spec.CacheUsageLimits.DataStorage) {
			delta.Add("Spec.CacheUsageLimits.DataStorage", a.ko.Spec.CacheUsageLimits.DataStorage, b.ko.Spec.CacheUsageLimits.DataStorage)
		} else if a.ko.Spec.CacheUsageLimits.DataStorage != nil && b.ko.Spec.CacheUsageLimits.DataStorage != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.DataStorage.Maximum, b.ko.Spec.CacheUsageLimits.DataStorage.Maximum) {
				delta.Add("Spec.CacheUsageLimits.DataStorage.Maximum", a.ko.Spec.CacheUsageLimits.DataStorage.Maximum, b.ko.Spec.CacheUsageLimits.DataStorage.Maximum)
			} else if a.ko.Spec.CacheUsageLimits.DataStorage.Maximum != nil && b.ko.Spec.CacheUsageLimits.DataStorage.Maximum != nil {
				if *a.ko.Spec.CacheUsageLimits.DataStorage.Maximum != *b.ko.Spec.CacheUsageLimits.DataStorage.Maximum {
					delta.Add("Spec.CacheUsageLimits.DataStorage.Maximum", a.ko.Spec.CacheUsageLimits.DataStorage.Maximum, b.ko.Spec.CacheUsageLimits.DataStorage.Maximum)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.DataStorage.Minimum, b.ko.Spec.CacheUsageLimits.DataStorage.Minimum) {
				delta.Add("Spec.CacheUsageLimits.DataStorage.Minimum", a.ko.Spec.CacheUsageLimits.DataStorage.Minimum, b.ko.Spec.CacheUsageLimits.DataStorage.Minimum)
			} else if a.ko.Spec.CacheUsageLimits.DataStorage.Minimum != nil && b.ko.Spec.CacheUsageLimits.DataStorage.Minimum != nil {
				if *a.ko.Spec.CacheUsageLimits.DataStorage.Minimum != *b.ko.Spec.CacheUsageLimits.DataStorage.Minimum {
					delta.Add("Spec.CacheUsageLimits.DataStorage.Minimum", a.ko.Spec.CacheUsageLimits.DataStorage.Minimum, b.ko.Spec.CacheUsageLimits.DataStorage.Minimum)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.DataStorage.Unit, b.ko.Spec.CacheUsageLimits.DataStorage.Unit) {
				delta.Add("Spec.CacheUsageLimits.DataStorage.Unit", a.ko.Spec.CacheUsageLimits.DataStorage.Unit, b.ko.Spec.CacheUsageLimits.DataStorage.Unit)
			} else if a.ko.Spec.CacheUsageLimits.DataStorage.Unit != nil && b.ko.Spec.CacheUsageLimits.DataStorage.Unit != nil {
				if *a.ko.Spec.CacheUsageLimits.DataStorage.Unit != *b.ko.Spec.CacheUsageLimits.DataStorage.Unit {
					delta.Add("Spec.CacheUsageLimits.DataStorage.Unit", a.ko.Spec.CacheUsageLimits.DataStorage.Unit, b.ko.Spec.CacheUsageLimits.DataStorage.Unit)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.ECPUPerSecond, b.ko.Spec.CacheUsageLimits.ECPUPerSecond) {
			delta.Add("Spec.CacheUsageLimits.ECPUPerSecond", a.ko.Spec.CacheUsageLimits.ECPUPerSecond, b.ko.Spec.CacheUsageLimits.ECPUPerSecond)
		} else if a.ko.Spec.CacheUsageLimits.ECPUPerSecond != nil && b.ko.Spec.CacheUsageLimits.ECPUPerSecond != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum) {
				delta.Add("Spec.CacheUsageLimits.ECPUPerSecond.Maximum", a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum)
			} else if a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum != nil && b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum != nil {
				if *a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum != *b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum {
					delta.Add("Spec.CacheUsageLimits.ECPUPerSecond.Maximum", a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Maximum)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum) {
				delta.Add("Spec.CacheUsageLimits.ECPUPerSecond.Minimum", a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum)
			} else if a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum != nil && b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum != nil {
				if *a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum != *b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum {
					delta.Add("Spec.CacheUsageLimits.ECPUPerSecond.Minimum", a.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum, b.ko.Spec.CacheUsageLimits.ECPUPerSecond.Minimum)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DailySnapshotTime, b.ko.Spec.DailySnapshotTime) {
		delta.Add("Spec.DailySnapshotTime", a.ko.Spec.DailySnapshotTime, b.ko.Spec.DailySnapshotTime)
	} else if a.ko.Spec.DailySnapshotTime != nil && b.ko.Spec.DailySnapshotTime != nil {
		if *a.ko.Spec.DailySnapshotTime != *b.ko.Spec.DailySnapshotTime {
			delta.Add("Spec.DailySnapshotTime", a.ko.Spec.DailySnapshotTime, b.ko.Spec.DailySnapshotTime)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Engine, b.ko.Spec.Engine) {
		delta.Add("Spec.Engine", a.ko.Spec.Engine, b.ko.Spec.Engine)
	} else if a.ko.Spec.Engine != nil && b.ko.Spec.Engine != nil {
		if *a.ko.Spec.Engine != *b.ko.Spec.Engine {
			delta.Add("Spec.Engine", a.ko.Spec.Engine, b.ko.Spec.Engine)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID) {
		delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
	} else if a.ko.Spec.KMSKeyID != nil && b.ko.Spec.KMSKeyID != nil {
		if *a.ko.Spec.KMSKeyID != *b.ko.Spec.KMSKeyID {
			delta.Add("Spec.KMSKeyID", a.ko.Spec.KMSKeyID, b.ko.Spec.KMSKeyID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MajorEngineVersion, b.ko.Spec.MajorEngineVersion) {
		delta.Add("Spec.MajorEngineVersion", a.ko.Spec.MajorEngineVersion, b.ko.Spec.MajorEngineVersion)
	} else if a.ko.Spec.MajorEngineVersion != nil && b.ko.Spec.MajorEngineVersion != nil {
		if *a.ko.Spec.MajorEngineVersion != *b.ko.Spec.MajorEngineVersion {
			delta.Add("Spec.MajorEngineVersion", a.ko.Spec.MajorEngineVersion, b.ko.Spec.MajorEngineVersion)
		}
	}
	if len(a.ko.Spec.SecurityGroupIDs) != len(b.ko.Spec.SecurityGroupIDs) {
		delta.Add("Spec.SecurityGroupIDs", a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs)
	} else if len(a.ko.Spec.SecurityGroupIDs) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs) {
			delta.Add("Spec.SecurityGroupIDs", a.ko.Spec.SecurityGroupIDs, b.ko.Spec.SecurityGroupIDs)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.SecurityGroupRefs, b.ko.Spec.SecurityGroupRefs) {
		delta.Add("Spec.SecurityGroupRefs", a.ko.Spec.SecurityGroupRefs, b.ko.Spec.SecurityGroupRefs)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ServerlessCacheName, b.ko.Spec.ServerlessCacheName) {
		delta.Add("Spec.ServerlessCacheName", a.ko.Spec.ServerlessCacheName, b.ko.Spec.ServerlessCacheName)
	} else if a.ko.Spec.ServerlessCacheName != nil && b.ko.Spec.ServerlessCacheName != nil {
		if *a.ko.Spec.ServerlessCacheName != *b.ko.Spec.ServerlessCacheName {
			delta.Add("Spec.ServerlessCacheName", a.ko.Spec.ServerlessCacheName, b.ko.Spec.ServerlessCacheName)
		}
	}
	if len(a.ko.Spec.SnapshotARNsToRestore) != len(b.ko.Spec.SnapshotARNsToRestore) {
		delta.Add("Spec.SnapshotARNsToRestore", a.ko.Spec.SnapshotARNsToRestore, b.ko.Spec.SnapshotARNsToRestore)
	} else if len(a.ko.Spec.SnapshotARNsToRestore) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SnapshotARNsToRestore, b.ko.Spec.SnapshotARNsToRestore) {
			delta.Add("Spec.SnapshotARNsToRestore", a.ko.Spec.SnapshotARNsToRestore, b.ko.Spec.SnapshotARNsToRestore)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SnapshotRetentionLimit, b.ko.Spec.SnapshotRetentionLimit) {
		delta.Add("Spec.SnapshotRetentionLimit", a.ko.Spec.SnapshotRetentionLimit, b.ko.Spec.SnapshotRetentionLimit)
	} else if a.ko.Spec.SnapshotRetentionLimit != nil && b.ko.Spec.SnapshotRetentionLimit != nil {
		if *a.ko.Spec.SnapshotRetentionLimit != *b.ko.Spec.SnapshotRetentionLimit {
			delta.Add("Spec.SnapshotRetentionLimit", a.ko.Spec.SnapshotRetentionLimit, b.ko.Spec.SnapshotRetentionLimit)
		}
	}
	if len(a.ko.Spec.SubnetIDs) != len(b.ko.Spec.SubnetIDs) {
		delta.Add("Spec.SubnetIDs", a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs)
	} else if len(a.ko.Spec.SubnetIDs) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs) {
			delta.Add("Spec.SubnetIDs", a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.SubnetRefs, b.ko.Spec.SubnetRefs) {
		delta.Add("Spec.SubnetRefs", a.ko.Spec.SubnetRefs, b.ko.Spec.SubnetRefs)
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.UserGroupID, b.ko.Spec.UserGroupID) {
		delta.Add("Spec.UserGroupID", a.ko.Spec.UserGroupID, b.ko.Spec.UserGroupID)
	} else if a.ko.Spec.UserGroupID != nil && b.ko.Spec.UserGroupID != nil {
		if *a.ko.Spec.UserGroupID != *b.ko.Spec.UserGroupID {
			delta.Add("Spec.UserGroupID", a.ko.Spec.UserGroupID, b.ko.Spec.UserGroupID)
		}
	}

	return delta
}
