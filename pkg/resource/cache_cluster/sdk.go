// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package cache_cluster

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/elasticache"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elasticache-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.ElastiCache{}
	_ = &svcapitypes.CacheCluster{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeCacheClustersOutput
	resp, err = rm.sdkapi.DescribeCacheClustersWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeCacheClusters", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "CacheClusterNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.CacheClusters {
		if elem.ARN != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ARN)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.AtRestEncryptionEnabled != nil {
			ko.Status.AtRestEncryptionEnabled = elem.AtRestEncryptionEnabled
		} else {
			ko.Status.AtRestEncryptionEnabled = nil
		}
		if elem.AuthTokenEnabled != nil {
			ko.Status.AuthTokenEnabled = elem.AuthTokenEnabled
		} else {
			ko.Status.AuthTokenEnabled = nil
		}
		if elem.AuthTokenLastModifiedDate != nil {
			ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*elem.AuthTokenLastModifiedDate}
		} else {
			ko.Status.AuthTokenLastModifiedDate = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			ko.Spec.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			ko.Spec.AutoMinorVersionUpgrade = nil
		}
		if elem.CacheClusterCreateTime != nil {
			ko.Status.CacheClusterCreateTime = &metav1.Time{*elem.CacheClusterCreateTime}
		} else {
			ko.Status.CacheClusterCreateTime = nil
		}
		if elem.CacheClusterId != nil {
			ko.Spec.CacheClusterID = elem.CacheClusterId
		} else {
			ko.Spec.CacheClusterID = nil
		}
		if elem.CacheClusterStatus != nil {
			ko.Status.CacheClusterStatus = elem.CacheClusterStatus
		} else {
			ko.Status.CacheClusterStatus = nil
		}
		if elem.CacheNodeType != nil {
			ko.Spec.CacheNodeType = elem.CacheNodeType
		} else {
			ko.Spec.CacheNodeType = nil
		}
		if elem.CacheNodes != nil {
			f9 := []*svcapitypes.CacheNode{}
			for _, f9iter := range elem.CacheNodes {
				f9elem := &svcapitypes.CacheNode{}
				if f9iter.CacheNodeCreateTime != nil {
					f9elem.CacheNodeCreateTime = &metav1.Time{*f9iter.CacheNodeCreateTime}
				}
				if f9iter.CacheNodeId != nil {
					f9elem.CacheNodeID = f9iter.CacheNodeId
				}
				if f9iter.CacheNodeStatus != nil {
					f9elem.CacheNodeStatus = f9iter.CacheNodeStatus
				}
				if f9iter.CustomerAvailabilityZone != nil {
					f9elem.CustomerAvailabilityZone = f9iter.CustomerAvailabilityZone
				}
				if f9iter.CustomerOutpostArn != nil {
					f9elem.CustomerOutpostARN = f9iter.CustomerOutpostArn
				}
				if f9iter.Endpoint != nil {
					f9elemf5 := &svcapitypes.Endpoint{}
					if f9iter.Endpoint.Address != nil {
						f9elemf5.Address = f9iter.Endpoint.Address
					}
					if f9iter.Endpoint.Port != nil {
						f9elemf5.Port = f9iter.Endpoint.Port
					}
					f9elem.Endpoint = f9elemf5
				}
				if f9iter.ParameterGroupStatus != nil {
					f9elem.ParameterGroupStatus = f9iter.ParameterGroupStatus
				}
				if f9iter.SourceCacheNodeId != nil {
					f9elem.SourceCacheNodeID = f9iter.SourceCacheNodeId
				}
				f9 = append(f9, f9elem)
			}
			ko.Status.CacheNodes = f9
		} else {
			ko.Status.CacheNodes = nil
		}
		if elem.CacheParameterGroup != nil {
			f10 := &svcapitypes.CacheParameterGroupStatus_SDK{}
			if elem.CacheParameterGroup.CacheNodeIdsToReboot != nil {
				f10f0 := []*string{}
				for _, f10f0iter := range elem.CacheParameterGroup.CacheNodeIdsToReboot {
					var f10f0elem string
					f10f0elem = *f10f0iter
					f10f0 = append(f10f0, &f10f0elem)
				}
				f10.CacheNodeIDsToReboot = f10f0
			}
			if elem.CacheParameterGroup.CacheParameterGroupName != nil {
				f10.CacheParameterGroupName = elem.CacheParameterGroup.CacheParameterGroupName
			}
			if elem.CacheParameterGroup.ParameterApplyStatus != nil {
				f10.ParameterApplyStatus = elem.CacheParameterGroup.ParameterApplyStatus
			}
			ko.Status.CacheParameterGroup = f10
		} else {
			ko.Status.CacheParameterGroup = nil
		}
		if elem.CacheSecurityGroups != nil {
			f11 := []*svcapitypes.CacheSecurityGroupMembership{}
			for _, f11iter := range elem.CacheSecurityGroups {
				f11elem := &svcapitypes.CacheSecurityGroupMembership{}
				if f11iter.CacheSecurityGroupName != nil {
					f11elem.CacheSecurityGroupName = f11iter.CacheSecurityGroupName
				}
				if f11iter.Status != nil {
					f11elem.Status = f11iter.Status
				}
				f11 = append(f11, f11elem)
			}
			ko.Status.CacheSecurityGroups = f11
		} else {
			ko.Status.CacheSecurityGroups = nil
		}
		if elem.CacheSubnetGroupName != nil {
			ko.Spec.CacheSubnetGroupName = elem.CacheSubnetGroupName
		} else {
			ko.Spec.CacheSubnetGroupName = nil
		}
		if elem.ClientDownloadLandingPage != nil {
			ko.Status.ClientDownloadLandingPage = elem.ClientDownloadLandingPage
		} else {
			ko.Status.ClientDownloadLandingPage = nil
		}
		if elem.ConfigurationEndpoint != nil {
			f14 := &svcapitypes.Endpoint{}
			if elem.ConfigurationEndpoint.Address != nil {
				f14.Address = elem.ConfigurationEndpoint.Address
			}
			if elem.ConfigurationEndpoint.Port != nil {
				f14.Port = elem.ConfigurationEndpoint.Port
			}
			ko.Status.ConfigurationEndpoint = f14
		} else {
			ko.Status.ConfigurationEndpoint = nil
		}
		if elem.Engine != nil {
			ko.Spec.Engine = elem.Engine
		} else {
			ko.Spec.Engine = nil
		}
		if elem.EngineVersion != nil {
			ko.Spec.EngineVersion = elem.EngineVersion
		} else {
			ko.Spec.EngineVersion = nil
		}
		if elem.IpDiscovery != nil {
			ko.Spec.IPDiscovery = elem.IpDiscovery
		} else {
			ko.Spec.IPDiscovery = nil
		}
		if elem.LogDeliveryConfigurations != nil {
			f18 := []*svcapitypes.LogDeliveryConfigurationRequest{}
			for _, f18iter := range elem.LogDeliveryConfigurations {
				f18elem := &svcapitypes.LogDeliveryConfigurationRequest{}
				if f18iter.DestinationDetails != nil {
					f18elemf0 := &svcapitypes.DestinationDetails{}
					if f18iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f18elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f18elemf0f0.LogGroup = f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f18elemf0.CloudWatchLogsDetails = f18elemf0f0
					}
					if f18iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f18elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f18elemf0f1.DeliveryStream = f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f18elemf0.KinesisFirehoseDetails = f18elemf0f1
					}
					f18elem.DestinationDetails = f18elemf0
				}
				if f18iter.DestinationType != nil {
					f18elem.DestinationType = f18iter.DestinationType
				}
				if f18iter.LogFormat != nil {
					f18elem.LogFormat = f18iter.LogFormat
				}
				if f18iter.LogType != nil {
					f18elem.LogType = f18iter.LogType
				}
				f18 = append(f18, f18elem)
			}
			ko.Spec.LogDeliveryConfigurations = f18
		} else {
			ko.Spec.LogDeliveryConfigurations = nil
		}
		if elem.NetworkType != nil {
			ko.Spec.NetworkType = elem.NetworkType
		} else {
			ko.Spec.NetworkType = nil
		}
		if elem.NotificationConfiguration != nil {
			f20 := &svcapitypes.NotificationConfiguration{}
			if elem.NotificationConfiguration.TopicArn != nil {
				f20.TopicARN = elem.NotificationConfiguration.TopicArn
			}
			if elem.NotificationConfiguration.TopicStatus != nil {
				f20.TopicStatus = elem.NotificationConfiguration.TopicStatus
			}
			ko.Status.NotificationConfiguration = f20
		} else {
			ko.Status.NotificationConfiguration = nil
		}
		if elem.NumCacheNodes != nil {
			ko.Spec.NumCacheNodes = elem.NumCacheNodes
		} else {
			ko.Spec.NumCacheNodes = nil
		}
		if elem.PendingModifiedValues != nil {
			f22 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AuthTokenStatus != nil {
				f22.AuthTokenStatus = elem.PendingModifiedValues.AuthTokenStatus
			}
			if elem.PendingModifiedValues.CacheNodeIdsToRemove != nil {
				f22f1 := []*string{}
				for _, f22f1iter := range elem.PendingModifiedValues.CacheNodeIdsToRemove {
					var f22f1elem string
					f22f1elem = *f22f1iter
					f22f1 = append(f22f1, &f22f1elem)
				}
				f22.CacheNodeIDsToRemove = f22f1
			}
			if elem.PendingModifiedValues.CacheNodeType != nil {
				f22.CacheNodeType = elem.PendingModifiedValues.CacheNodeType
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f22.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.NumCacheNodes != nil {
				f22.NumCacheNodes = elem.PendingModifiedValues.NumCacheNodes
			}
			if elem.PendingModifiedValues.TransitEncryptionEnabled != nil {
				f22.TransitEncryptionEnabled = elem.PendingModifiedValues.TransitEncryptionEnabled
			}
			if elem.PendingModifiedValues.TransitEncryptionMode != nil {
				f22.TransitEncryptionMode = elem.PendingModifiedValues.TransitEncryptionMode
			}
			ko.Status.PendingModifiedValues = f22
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.PreferredAvailabilityZone != nil {
			ko.Spec.PreferredAvailabilityZone = elem.PreferredAvailabilityZone
		} else {
			ko.Spec.PreferredAvailabilityZone = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			ko.Spec.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			ko.Spec.PreferredMaintenanceWindow = nil
		}
		if elem.PreferredOutpostArn != nil {
			ko.Spec.PreferredOutpostARN = elem.PreferredOutpostArn
		} else {
			ko.Spec.PreferredOutpostARN = nil
		}
		if elem.ReplicationGroupId != nil {
			ko.Spec.ReplicationGroupID = elem.ReplicationGroupId
		} else {
			ko.Spec.ReplicationGroupID = nil
		}
		if elem.ReplicationGroupLogDeliveryEnabled != nil {
			ko.Status.ReplicationGroupLogDeliveryEnabled = elem.ReplicationGroupLogDeliveryEnabled
		} else {
			ko.Status.ReplicationGroupLogDeliveryEnabled = nil
		}
		if elem.SecurityGroups != nil {
			f28 := []*svcapitypes.SecurityGroupMembership{}
			for _, f28iter := range elem.SecurityGroups {
				f28elem := &svcapitypes.SecurityGroupMembership{}
				if f28iter.SecurityGroupId != nil {
					f28elem.SecurityGroupID = f28iter.SecurityGroupId
				}
				if f28iter.Status != nil {
					f28elem.Status = f28iter.Status
				}
				f28 = append(f28, f28elem)
			}
			ko.Status.SecurityGroups = f28
		} else {
			ko.Status.SecurityGroups = nil
		}
		if elem.SnapshotRetentionLimit != nil {
			ko.Spec.SnapshotRetentionLimit = elem.SnapshotRetentionLimit
		} else {
			ko.Spec.SnapshotRetentionLimit = nil
		}
		if elem.SnapshotWindow != nil {
			ko.Spec.SnapshotWindow = elem.SnapshotWindow
		} else {
			ko.Spec.SnapshotWindow = nil
		}
		if elem.TransitEncryptionEnabled != nil {
			ko.Spec.TransitEncryptionEnabled = elem.TransitEncryptionEnabled
		} else {
			ko.Spec.TransitEncryptionEnabled = nil
		}
		if elem.TransitEncryptionMode != nil {
			ko.Status.TransitEncryptionMode = elem.TransitEncryptionMode
		} else {
			ko.Status.TransitEncryptionMode = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if pendingModifications := ko.Status.PendingModifiedValues; pendingModifications != nil {
		if pendingModifications.NumCacheNodes != nil {
			ko.Spec.NumCacheNodes = pendingModifications.NumCacheNodes
		}
		if pendingModifications.CacheNodeType != nil {
			ko.Spec.CacheNodeType = pendingModifications.CacheNodeType
		}
		if pendingModifications.TransitEncryptionEnabled != nil {
			ko.Spec.TransitEncryptionEnabled = pendingModifications.TransitEncryptionEnabled
		}
	}
	if isAvailable(r) {
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionTrue, nil, nil)
	} else {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}
	if ko.Status.ACKResourceMetadata != nil && ko.Status.ACKResourceMetadata.ARN != nil {
		resourceARN := (*string)(ko.Status.ACKResourceMetadata.ARN)
		tags, err := rm.getTags(ctx, *resourceARN)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Spec.CacheClusterID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeCacheClustersInput, error) {
	res := &svcsdk.DescribeCacheClustersInput{}

	if r.ko.Spec.CacheClusterID != nil {
		res.SetCacheClusterId(*r.ko.Spec.CacheClusterID)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	if err := validateUnsupportedFields(desired); err != nil {
		return nil, err
	}

	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateCacheClusterOutput
	_ = resp
	resp, err = rm.sdkapi.CreateCacheClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCacheCluster", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CacheCluster.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CacheCluster.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CacheCluster.AtRestEncryptionEnabled != nil {
		ko.Status.AtRestEncryptionEnabled = resp.CacheCluster.AtRestEncryptionEnabled
	} else {
		ko.Status.AtRestEncryptionEnabled = nil
	}
	if resp.CacheCluster.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.CacheCluster.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.CacheCluster.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.CacheCluster.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.CacheCluster.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.CacheCluster.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.CacheCluster.CacheClusterCreateTime != nil {
		ko.Status.CacheClusterCreateTime = &metav1.Time{*resp.CacheCluster.CacheClusterCreateTime}
	} else {
		ko.Status.CacheClusterCreateTime = nil
	}
	if resp.CacheCluster.CacheClusterId != nil {
		ko.Spec.CacheClusterID = resp.CacheCluster.CacheClusterId
	} else {
		ko.Spec.CacheClusterID = nil
	}
	if resp.CacheCluster.CacheClusterStatus != nil {
		ko.Status.CacheClusterStatus = resp.CacheCluster.CacheClusterStatus
	} else {
		ko.Status.CacheClusterStatus = nil
	}
	if resp.CacheCluster.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.CacheCluster.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.CacheCluster.CacheNodes != nil {
		f9 := []*svcapitypes.CacheNode{}
		for _, f9iter := range resp.CacheCluster.CacheNodes {
			f9elem := &svcapitypes.CacheNode{}
			if f9iter.CacheNodeCreateTime != nil {
				f9elem.CacheNodeCreateTime = &metav1.Time{*f9iter.CacheNodeCreateTime}
			}
			if f9iter.CacheNodeId != nil {
				f9elem.CacheNodeID = f9iter.CacheNodeId
			}
			if f9iter.CacheNodeStatus != nil {
				f9elem.CacheNodeStatus = f9iter.CacheNodeStatus
			}
			if f9iter.CustomerAvailabilityZone != nil {
				f9elem.CustomerAvailabilityZone = f9iter.CustomerAvailabilityZone
			}
			if f9iter.CustomerOutpostArn != nil {
				f9elem.CustomerOutpostARN = f9iter.CustomerOutpostArn
			}
			if f9iter.Endpoint != nil {
				f9elemf5 := &svcapitypes.Endpoint{}
				if f9iter.Endpoint.Address != nil {
					f9elemf5.Address = f9iter.Endpoint.Address
				}
				if f9iter.Endpoint.Port != nil {
					f9elemf5.Port = f9iter.Endpoint.Port
				}
				f9elem.Endpoint = f9elemf5
			}
			if f9iter.ParameterGroupStatus != nil {
				f9elem.ParameterGroupStatus = f9iter.ParameterGroupStatus
			}
			if f9iter.SourceCacheNodeId != nil {
				f9elem.SourceCacheNodeID = f9iter.SourceCacheNodeId
			}
			f9 = append(f9, f9elem)
		}
		ko.Status.CacheNodes = f9
	} else {
		ko.Status.CacheNodes = nil
	}
	if resp.CacheCluster.CacheParameterGroup != nil {
		f10 := &svcapitypes.CacheParameterGroupStatus_SDK{}
		if resp.CacheCluster.CacheParameterGroup.CacheNodeIdsToReboot != nil {
			f10f0 := []*string{}
			for _, f10f0iter := range resp.CacheCluster.CacheParameterGroup.CacheNodeIdsToReboot {
				var f10f0elem string
				f10f0elem = *f10f0iter
				f10f0 = append(f10f0, &f10f0elem)
			}
			f10.CacheNodeIDsToReboot = f10f0
		}
		if resp.CacheCluster.CacheParameterGroup.CacheParameterGroupName != nil {
			f10.CacheParameterGroupName = resp.CacheCluster.CacheParameterGroup.CacheParameterGroupName
		}
		if resp.CacheCluster.CacheParameterGroup.ParameterApplyStatus != nil {
			f10.ParameterApplyStatus = resp.CacheCluster.CacheParameterGroup.ParameterApplyStatus
		}
		ko.Status.CacheParameterGroup = f10
	} else {
		ko.Status.CacheParameterGroup = nil
	}
	if resp.CacheCluster.CacheSecurityGroups != nil {
		f11 := []*svcapitypes.CacheSecurityGroupMembership{}
		for _, f11iter := range resp.CacheCluster.CacheSecurityGroups {
			f11elem := &svcapitypes.CacheSecurityGroupMembership{}
			if f11iter.CacheSecurityGroupName != nil {
				f11elem.CacheSecurityGroupName = f11iter.CacheSecurityGroupName
			}
			if f11iter.Status != nil {
				f11elem.Status = f11iter.Status
			}
			f11 = append(f11, f11elem)
		}
		ko.Status.CacheSecurityGroups = f11
	} else {
		ko.Status.CacheSecurityGroups = nil
	}
	if resp.CacheCluster.CacheSubnetGroupName != nil {
		ko.Spec.CacheSubnetGroupName = resp.CacheCluster.CacheSubnetGroupName
	} else {
		ko.Spec.CacheSubnetGroupName = nil
	}
	if resp.CacheCluster.ClientDownloadLandingPage != nil {
		ko.Status.ClientDownloadLandingPage = resp.CacheCluster.ClientDownloadLandingPage
	} else {
		ko.Status.ClientDownloadLandingPage = nil
	}
	if resp.CacheCluster.ConfigurationEndpoint != nil {
		f14 := &svcapitypes.Endpoint{}
		if resp.CacheCluster.ConfigurationEndpoint.Address != nil {
			f14.Address = resp.CacheCluster.ConfigurationEndpoint.Address
		}
		if resp.CacheCluster.ConfigurationEndpoint.Port != nil {
			f14.Port = resp.CacheCluster.ConfigurationEndpoint.Port
		}
		ko.Status.ConfigurationEndpoint = f14
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.CacheCluster.Engine != nil {
		ko.Spec.Engine = resp.CacheCluster.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.CacheCluster.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.CacheCluster.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.CacheCluster.IpDiscovery != nil {
		ko.Spec.IPDiscovery = resp.CacheCluster.IpDiscovery
	} else {
		ko.Spec.IPDiscovery = nil
	}
	if resp.CacheCluster.LogDeliveryConfigurations != nil {
		f18 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f18iter := range resp.CacheCluster.LogDeliveryConfigurations {
			f18elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f18iter.DestinationDetails != nil {
				f18elemf0 := &svcapitypes.DestinationDetails{}
				if f18iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f18elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f18elemf0f0.LogGroup = f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f18elemf0.CloudWatchLogsDetails = f18elemf0f0
				}
				if f18iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f18elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f18elemf0f1.DeliveryStream = f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f18elemf0.KinesisFirehoseDetails = f18elemf0f1
				}
				f18elem.DestinationDetails = f18elemf0
			}
			if f18iter.DestinationType != nil {
				f18elem.DestinationType = f18iter.DestinationType
			}
			if f18iter.LogFormat != nil {
				f18elem.LogFormat = f18iter.LogFormat
			}
			if f18iter.LogType != nil {
				f18elem.LogType = f18iter.LogType
			}
			f18 = append(f18, f18elem)
		}
		ko.Spec.LogDeliveryConfigurations = f18
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.CacheCluster.NetworkType != nil {
		ko.Spec.NetworkType = resp.CacheCluster.NetworkType
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.CacheCluster.NotificationConfiguration != nil {
		f20 := &svcapitypes.NotificationConfiguration{}
		if resp.CacheCluster.NotificationConfiguration.TopicArn != nil {
			f20.TopicARN = resp.CacheCluster.NotificationConfiguration.TopicArn
		}
		if resp.CacheCluster.NotificationConfiguration.TopicStatus != nil {
			f20.TopicStatus = resp.CacheCluster.NotificationConfiguration.TopicStatus
		}
		ko.Status.NotificationConfiguration = f20
	} else {
		ko.Status.NotificationConfiguration = nil
	}
	if resp.CacheCluster.NumCacheNodes != nil {
		ko.Spec.NumCacheNodes = resp.CacheCluster.NumCacheNodes
	} else {
		ko.Spec.NumCacheNodes = nil
	}
	if resp.CacheCluster.PendingModifiedValues != nil {
		f22 := &svcapitypes.PendingModifiedValues{}
		if resp.CacheCluster.PendingModifiedValues.AuthTokenStatus != nil {
			f22.AuthTokenStatus = resp.CacheCluster.PendingModifiedValues.AuthTokenStatus
		}
		if resp.CacheCluster.PendingModifiedValues.CacheNodeIdsToRemove != nil {
			f22f1 := []*string{}
			for _, f22f1iter := range resp.CacheCluster.PendingModifiedValues.CacheNodeIdsToRemove {
				var f22f1elem string
				f22f1elem = *f22f1iter
				f22f1 = append(f22f1, &f22f1elem)
			}
			f22.CacheNodeIDsToRemove = f22f1
		}
		if resp.CacheCluster.PendingModifiedValues.CacheNodeType != nil {
			f22.CacheNodeType = resp.CacheCluster.PendingModifiedValues.CacheNodeType
		}
		if resp.CacheCluster.PendingModifiedValues.EngineVersion != nil {
			f22.EngineVersion = resp.CacheCluster.PendingModifiedValues.EngineVersion
		}
		if resp.CacheCluster.PendingModifiedValues.NumCacheNodes != nil {
			f22.NumCacheNodes = resp.CacheCluster.PendingModifiedValues.NumCacheNodes
		}
		if resp.CacheCluster.PendingModifiedValues.TransitEncryptionEnabled != nil {
			f22.TransitEncryptionEnabled = resp.CacheCluster.PendingModifiedValues.TransitEncryptionEnabled
		}
		if resp.CacheCluster.PendingModifiedValues.TransitEncryptionMode != nil {
			f22.TransitEncryptionMode = resp.CacheCluster.PendingModifiedValues.TransitEncryptionMode
		}
		ko.Status.PendingModifiedValues = f22
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.CacheCluster.PreferredAvailabilityZone != nil {
		ko.Spec.PreferredAvailabilityZone = resp.CacheCluster.PreferredAvailabilityZone
	} else {
		ko.Spec.PreferredAvailabilityZone = nil
	}
	if resp.CacheCluster.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.CacheCluster.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.CacheCluster.PreferredOutpostArn != nil {
		ko.Spec.PreferredOutpostARN = resp.CacheCluster.PreferredOutpostArn
	} else {
		ko.Spec.PreferredOutpostARN = nil
	}
	if resp.CacheCluster.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.CacheCluster.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.CacheCluster.ReplicationGroupLogDeliveryEnabled != nil {
		ko.Status.ReplicationGroupLogDeliveryEnabled = resp.CacheCluster.ReplicationGroupLogDeliveryEnabled
	} else {
		ko.Status.ReplicationGroupLogDeliveryEnabled = nil
	}
	if resp.CacheCluster.SecurityGroups != nil {
		f28 := []*svcapitypes.SecurityGroupMembership{}
		for _, f28iter := range resp.CacheCluster.SecurityGroups {
			f28elem := &svcapitypes.SecurityGroupMembership{}
			if f28iter.SecurityGroupId != nil {
				f28elem.SecurityGroupID = f28iter.SecurityGroupId
			}
			if f28iter.Status != nil {
				f28elem.Status = f28iter.Status
			}
			f28 = append(f28, f28elem)
		}
		ko.Status.SecurityGroups = f28
	} else {
		ko.Status.SecurityGroups = nil
	}
	if resp.CacheCluster.SnapshotRetentionLimit != nil {
		ko.Spec.SnapshotRetentionLimit = resp.CacheCluster.SnapshotRetentionLimit
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.CacheCluster.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.CacheCluster.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.CacheCluster.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.CacheCluster.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.CacheCluster.TransitEncryptionMode != nil {
		ko.Status.TransitEncryptionMode = resp.CacheCluster.TransitEncryptionMode
	} else {
		ko.Status.TransitEncryptionMode = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.customCreateCacheClusterSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	if isCreating(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateCacheClusterInput, error) {
	res := &svcsdk.CreateCacheClusterInput{}

	if r.ko.Spec.AZMode != nil {
		res.SetAZMode(*r.ko.Spec.AZMode)
	}
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetAuthToken(tmpSecret)
		}
	}
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Spec.AutoMinorVersionUpgrade)
	}
	if r.ko.Spec.CacheClusterID != nil {
		res.SetCacheClusterId(*r.ko.Spec.CacheClusterID)
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.SetCacheNodeType(*r.ko.Spec.CacheNodeType)
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.SetCacheParameterGroupName(*r.ko.Spec.CacheParameterGroupName)
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		f6 := []*string{}
		for _, f6iter := range r.ko.Spec.CacheSecurityGroupNames {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetCacheSecurityGroupNames(f6)
	}
	if r.ko.Spec.CacheSubnetGroupName != nil {
		res.SetCacheSubnetGroupName(*r.ko.Spec.CacheSubnetGroupName)
	}
	if r.ko.Spec.Engine != nil {
		res.SetEngine(*r.ko.Spec.Engine)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.IPDiscovery != nil {
		res.SetIpDiscovery(*r.ko.Spec.IPDiscovery)
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f11 := []*svcsdk.LogDeliveryConfigurationRequest{}
		for _, f11iter := range r.ko.Spec.LogDeliveryConfigurations {
			f11elem := &svcsdk.LogDeliveryConfigurationRequest{}
			if f11iter.DestinationDetails != nil {
				f11elemf0 := &svcsdk.DestinationDetails{}
				if f11iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f11elemf0f0 := &svcsdk.CloudWatchLogsDestinationDetails{}
					if f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f11elemf0f0.SetLogGroup(*f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup)
					}
					f11elemf0.SetCloudWatchLogsDetails(f11elemf0f0)
				}
				if f11iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f11elemf0f1 := &svcsdk.KinesisFirehoseDestinationDetails{}
					if f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f11elemf0f1.SetDeliveryStream(*f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream)
					}
					f11elemf0.SetKinesisFirehoseDetails(f11elemf0f1)
				}
				f11elem.SetDestinationDetails(f11elemf0)
			}
			if f11iter.DestinationType != nil {
				f11elem.SetDestinationType(*f11iter.DestinationType)
			}
			if f11iter.Enabled != nil {
				f11elem.SetEnabled(*f11iter.Enabled)
			}
			if f11iter.LogFormat != nil {
				f11elem.SetLogFormat(*f11iter.LogFormat)
			}
			if f11iter.LogType != nil {
				f11elem.SetLogType(*f11iter.LogType)
			}
			f11 = append(f11, f11elem)
		}
		res.SetLogDeliveryConfigurations(f11)
	}
	if r.ko.Spec.NetworkType != nil {
		res.SetNetworkType(*r.ko.Spec.NetworkType)
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*r.ko.Spec.NotificationTopicARN)
	}
	if r.ko.Spec.NumCacheNodes != nil {
		res.SetNumCacheNodes(*r.ko.Spec.NumCacheNodes)
	}
	if r.ko.Spec.OutpostMode != nil {
		res.SetOutpostMode(*r.ko.Spec.OutpostMode)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.PreferredAvailabilityZone != nil {
		res.SetPreferredAvailabilityZone(*r.ko.Spec.PreferredAvailabilityZone)
	}
	if r.ko.Spec.PreferredAvailabilityZones != nil {
		f18 := []*string{}
		for _, f18iter := range r.ko.Spec.PreferredAvailabilityZones {
			var f18elem string
			f18elem = *f18iter
			f18 = append(f18, &f18elem)
		}
		res.SetPreferredAvailabilityZones(f18)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.PreferredOutpostARN != nil {
		res.SetPreferredOutpostArn(*r.ko.Spec.PreferredOutpostARN)
	}
	if r.ko.Spec.PreferredOutpostARNs != nil {
		f21 := []*string{}
		for _, f21iter := range r.ko.Spec.PreferredOutpostARNs {
			var f21elem string
			f21elem = *f21iter
			f21 = append(f21, &f21elem)
		}
		res.SetPreferredOutpostArns(f21)
	}
	if r.ko.Spec.ReplicationGroupID != nil {
		res.SetReplicationGroupId(*r.ko.Spec.ReplicationGroupID)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f23 := []*string{}
		for _, f23iter := range r.ko.Spec.SecurityGroupIDs {
			var f23elem string
			f23elem = *f23iter
			f23 = append(f23, &f23elem)
		}
		res.SetSecurityGroupIds(f23)
	}
	if r.ko.Spec.SnapshotARNs != nil {
		f24 := []*string{}
		for _, f24iter := range r.ko.Spec.SnapshotARNs {
			var f24elem string
			f24elem = *f24iter
			f24 = append(f24, &f24elem)
		}
		res.SetSnapshotArns(f24)
	}
	if r.ko.Spec.SnapshotName != nil {
		res.SetSnapshotName(*r.ko.Spec.SnapshotName)
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*r.ko.Spec.SnapshotRetentionLimit)
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SetSnapshotWindow(*r.ko.Spec.SnapshotWindow)
	}
	if r.ko.Spec.Tags != nil {
		f28 := []*svcsdk.Tag{}
		for _, f28iter := range r.ko.Spec.Tags {
			f28elem := &svcsdk.Tag{}
			if f28iter.Key != nil {
				f28elem.SetKey(*f28iter.Key)
			}
			if f28iter.Value != nil {
				f28elem.SetValue(*f28iter.Value)
			}
			f28 = append(f28, f28elem)
		}
		res.SetTags(f28)
	}
	if r.ko.Spec.TransitEncryptionEnabled != nil {
		res.SetTransitEncryptionEnabled(*r.ko.Spec.TransitEncryptionEnabled)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if immutableFieldChanges := rm.getImmutableFieldChanges(delta); len(immutableFieldChanges) > 0 {
		msg := fmt.Sprintf("Immutable Spec fields have been modified: %s", strings.Join(immutableFieldChanges, ","))
		return nil, ackerr.NewTerminalError(fmt.Errorf(msg))
	}
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	} else if !delta.DifferentExcept("Spec.Tags") {
		// If the only difference between the desired and latest is in the
		// Spec.Tags field, we can skip the ModifyCacheCluster call.
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if err := rm.updateCacheClusterPayload(input, desired, latest, delta); err != nil {
		return nil, ackerr.NewTerminalError(err)
	}

	var resp *svcsdk.ModifyCacheClusterOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyCacheClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyCacheCluster", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.CacheCluster.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.CacheCluster.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CacheCluster.AtRestEncryptionEnabled != nil {
		ko.Status.AtRestEncryptionEnabled = resp.CacheCluster.AtRestEncryptionEnabled
	} else {
		ko.Status.AtRestEncryptionEnabled = nil
	}
	if resp.CacheCluster.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.CacheCluster.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.CacheCluster.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.CacheCluster.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.CacheCluster.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.CacheCluster.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.CacheCluster.CacheClusterCreateTime != nil {
		ko.Status.CacheClusterCreateTime = &metav1.Time{*resp.CacheCluster.CacheClusterCreateTime}
	} else {
		ko.Status.CacheClusterCreateTime = nil
	}
	if resp.CacheCluster.CacheClusterId != nil {
		ko.Spec.CacheClusterID = resp.CacheCluster.CacheClusterId
	} else {
		ko.Spec.CacheClusterID = nil
	}
	if resp.CacheCluster.CacheClusterStatus != nil {
		ko.Status.CacheClusterStatus = resp.CacheCluster.CacheClusterStatus
	} else {
		ko.Status.CacheClusterStatus = nil
	}
	if resp.CacheCluster.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.CacheCluster.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.CacheCluster.CacheNodes != nil {
		f9 := []*svcapitypes.CacheNode{}
		for _, f9iter := range resp.CacheCluster.CacheNodes {
			f9elem := &svcapitypes.CacheNode{}
			if f9iter.CacheNodeCreateTime != nil {
				f9elem.CacheNodeCreateTime = &metav1.Time{*f9iter.CacheNodeCreateTime}
			}
			if f9iter.CacheNodeId != nil {
				f9elem.CacheNodeID = f9iter.CacheNodeId
			}
			if f9iter.CacheNodeStatus != nil {
				f9elem.CacheNodeStatus = f9iter.CacheNodeStatus
			}
			if f9iter.CustomerAvailabilityZone != nil {
				f9elem.CustomerAvailabilityZone = f9iter.CustomerAvailabilityZone
			}
			if f9iter.CustomerOutpostArn != nil {
				f9elem.CustomerOutpostARN = f9iter.CustomerOutpostArn
			}
			if f9iter.Endpoint != nil {
				f9elemf5 := &svcapitypes.Endpoint{}
				if f9iter.Endpoint.Address != nil {
					f9elemf5.Address = f9iter.Endpoint.Address
				}
				if f9iter.Endpoint.Port != nil {
					f9elemf5.Port = f9iter.Endpoint.Port
				}
				f9elem.Endpoint = f9elemf5
			}
			if f9iter.ParameterGroupStatus != nil {
				f9elem.ParameterGroupStatus = f9iter.ParameterGroupStatus
			}
			if f9iter.SourceCacheNodeId != nil {
				f9elem.SourceCacheNodeID = f9iter.SourceCacheNodeId
			}
			f9 = append(f9, f9elem)
		}
		ko.Status.CacheNodes = f9
	} else {
		ko.Status.CacheNodes = nil
	}
	if resp.CacheCluster.CacheParameterGroup != nil {
		f10 := &svcapitypes.CacheParameterGroupStatus_SDK{}
		if resp.CacheCluster.CacheParameterGroup.CacheNodeIdsToReboot != nil {
			f10f0 := []*string{}
			for _, f10f0iter := range resp.CacheCluster.CacheParameterGroup.CacheNodeIdsToReboot {
				var f10f0elem string
				f10f0elem = *f10f0iter
				f10f0 = append(f10f0, &f10f0elem)
			}
			f10.CacheNodeIDsToReboot = f10f0
		}
		if resp.CacheCluster.CacheParameterGroup.CacheParameterGroupName != nil {
			f10.CacheParameterGroupName = resp.CacheCluster.CacheParameterGroup.CacheParameterGroupName
		}
		if resp.CacheCluster.CacheParameterGroup.ParameterApplyStatus != nil {
			f10.ParameterApplyStatus = resp.CacheCluster.CacheParameterGroup.ParameterApplyStatus
		}
		ko.Status.CacheParameterGroup = f10
	} else {
		ko.Status.CacheParameterGroup = nil
	}
	if resp.CacheCluster.CacheSecurityGroups != nil {
		f11 := []*svcapitypes.CacheSecurityGroupMembership{}
		for _, f11iter := range resp.CacheCluster.CacheSecurityGroups {
			f11elem := &svcapitypes.CacheSecurityGroupMembership{}
			if f11iter.CacheSecurityGroupName != nil {
				f11elem.CacheSecurityGroupName = f11iter.CacheSecurityGroupName
			}
			if f11iter.Status != nil {
				f11elem.Status = f11iter.Status
			}
			f11 = append(f11, f11elem)
		}
		ko.Status.CacheSecurityGroups = f11
	} else {
		ko.Status.CacheSecurityGroups = nil
	}
	if resp.CacheCluster.CacheSubnetGroupName != nil {
		ko.Spec.CacheSubnetGroupName = resp.CacheCluster.CacheSubnetGroupName
	} else {
		ko.Spec.CacheSubnetGroupName = nil
	}
	if resp.CacheCluster.ClientDownloadLandingPage != nil {
		ko.Status.ClientDownloadLandingPage = resp.CacheCluster.ClientDownloadLandingPage
	} else {
		ko.Status.ClientDownloadLandingPage = nil
	}
	if resp.CacheCluster.ConfigurationEndpoint != nil {
		f14 := &svcapitypes.Endpoint{}
		if resp.CacheCluster.ConfigurationEndpoint.Address != nil {
			f14.Address = resp.CacheCluster.ConfigurationEndpoint.Address
		}
		if resp.CacheCluster.ConfigurationEndpoint.Port != nil {
			f14.Port = resp.CacheCluster.ConfigurationEndpoint.Port
		}
		ko.Status.ConfigurationEndpoint = f14
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.CacheCluster.Engine != nil {
		ko.Spec.Engine = resp.CacheCluster.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.CacheCluster.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.CacheCluster.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.CacheCluster.IpDiscovery != nil {
		ko.Spec.IPDiscovery = resp.CacheCluster.IpDiscovery
	} else {
		ko.Spec.IPDiscovery = nil
	}
	if resp.CacheCluster.LogDeliveryConfigurations != nil {
		f18 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f18iter := range resp.CacheCluster.LogDeliveryConfigurations {
			f18elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f18iter.DestinationDetails != nil {
				f18elemf0 := &svcapitypes.DestinationDetails{}
				if f18iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f18elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f18elemf0f0.LogGroup = f18iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f18elemf0.CloudWatchLogsDetails = f18elemf0f0
				}
				if f18iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f18elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f18elemf0f1.DeliveryStream = f18iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f18elemf0.KinesisFirehoseDetails = f18elemf0f1
				}
				f18elem.DestinationDetails = f18elemf0
			}
			if f18iter.DestinationType != nil {
				f18elem.DestinationType = f18iter.DestinationType
			}
			if f18iter.LogFormat != nil {
				f18elem.LogFormat = f18iter.LogFormat
			}
			if f18iter.LogType != nil {
				f18elem.LogType = f18iter.LogType
			}
			f18 = append(f18, f18elem)
		}
		ko.Spec.LogDeliveryConfigurations = f18
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.CacheCluster.NetworkType != nil {
		ko.Spec.NetworkType = resp.CacheCluster.NetworkType
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.CacheCluster.NotificationConfiguration != nil {
		f20 := &svcapitypes.NotificationConfiguration{}
		if resp.CacheCluster.NotificationConfiguration.TopicArn != nil {
			f20.TopicARN = resp.CacheCluster.NotificationConfiguration.TopicArn
		}
		if resp.CacheCluster.NotificationConfiguration.TopicStatus != nil {
			f20.TopicStatus = resp.CacheCluster.NotificationConfiguration.TopicStatus
		}
		ko.Status.NotificationConfiguration = f20
	} else {
		ko.Status.NotificationConfiguration = nil
	}
	if resp.CacheCluster.NumCacheNodes != nil {
		ko.Spec.NumCacheNodes = resp.CacheCluster.NumCacheNodes
	} else {
		ko.Spec.NumCacheNodes = nil
	}
	if resp.CacheCluster.PendingModifiedValues != nil {
		f22 := &svcapitypes.PendingModifiedValues{}
		if resp.CacheCluster.PendingModifiedValues.AuthTokenStatus != nil {
			f22.AuthTokenStatus = resp.CacheCluster.PendingModifiedValues.AuthTokenStatus
		}
		if resp.CacheCluster.PendingModifiedValues.CacheNodeIdsToRemove != nil {
			f22f1 := []*string{}
			for _, f22f1iter := range resp.CacheCluster.PendingModifiedValues.CacheNodeIdsToRemove {
				var f22f1elem string
				f22f1elem = *f22f1iter
				f22f1 = append(f22f1, &f22f1elem)
			}
			f22.CacheNodeIDsToRemove = f22f1
		}
		if resp.CacheCluster.PendingModifiedValues.CacheNodeType != nil {
			f22.CacheNodeType = resp.CacheCluster.PendingModifiedValues.CacheNodeType
		}
		if resp.CacheCluster.PendingModifiedValues.EngineVersion != nil {
			f22.EngineVersion = resp.CacheCluster.PendingModifiedValues.EngineVersion
		}
		if resp.CacheCluster.PendingModifiedValues.NumCacheNodes != nil {
			f22.NumCacheNodes = resp.CacheCluster.PendingModifiedValues.NumCacheNodes
		}
		if resp.CacheCluster.PendingModifiedValues.TransitEncryptionEnabled != nil {
			f22.TransitEncryptionEnabled = resp.CacheCluster.PendingModifiedValues.TransitEncryptionEnabled
		}
		if resp.CacheCluster.PendingModifiedValues.TransitEncryptionMode != nil {
			f22.TransitEncryptionMode = resp.CacheCluster.PendingModifiedValues.TransitEncryptionMode
		}
		ko.Status.PendingModifiedValues = f22
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.CacheCluster.PreferredAvailabilityZone != nil {
		ko.Spec.PreferredAvailabilityZone = resp.CacheCluster.PreferredAvailabilityZone
	} else {
		ko.Spec.PreferredAvailabilityZone = nil
	}
	if resp.CacheCluster.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.CacheCluster.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.CacheCluster.PreferredOutpostArn != nil {
		ko.Spec.PreferredOutpostARN = resp.CacheCluster.PreferredOutpostArn
	} else {
		ko.Spec.PreferredOutpostARN = nil
	}
	if resp.CacheCluster.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.CacheCluster.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.CacheCluster.ReplicationGroupLogDeliveryEnabled != nil {
		ko.Status.ReplicationGroupLogDeliveryEnabled = resp.CacheCluster.ReplicationGroupLogDeliveryEnabled
	} else {
		ko.Status.ReplicationGroupLogDeliveryEnabled = nil
	}
	if resp.CacheCluster.SecurityGroups != nil {
		f28 := []*svcapitypes.SecurityGroupMembership{}
		for _, f28iter := range resp.CacheCluster.SecurityGroups {
			f28elem := &svcapitypes.SecurityGroupMembership{}
			if f28iter.SecurityGroupId != nil {
				f28elem.SecurityGroupID = f28iter.SecurityGroupId
			}
			if f28iter.Status != nil {
				f28elem.Status = f28iter.Status
			}
			f28 = append(f28, f28elem)
		}
		ko.Status.SecurityGroups = f28
	} else {
		ko.Status.SecurityGroups = nil
	}
	if resp.CacheCluster.SnapshotRetentionLimit != nil {
		ko.Spec.SnapshotRetentionLimit = resp.CacheCluster.SnapshotRetentionLimit
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.CacheCluster.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.CacheCluster.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.CacheCluster.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.CacheCluster.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.CacheCluster.TransitEncryptionMode != nil {
		ko.Status.TransitEncryptionMode = resp.CacheCluster.TransitEncryptionMode
	} else {
		ko.Status.TransitEncryptionMode = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.customModifyCacheClusterSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	if pendingModifications := resp.CacheCluster.PendingModifiedValues; pendingModifications != nil {
		if pendingModifications.NumCacheNodes != nil {
			ko.Spec.NumCacheNodes = pendingModifications.NumCacheNodes
		}
		if pendingModifications.CacheNodeType != nil {
			ko.Spec.CacheNodeType = pendingModifications.CacheNodeType
		}
		if pendingModifications.TransitEncryptionEnabled != nil {
			ko.Spec.TransitEncryptionEnabled = pendingModifications.TransitEncryptionEnabled
		}
	}

	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyCacheClusterInput, error) {
	res := &svcsdk.ModifyCacheClusterInput{}

	if r.ko.Spec.AZMode != nil {
		res.SetAZMode(*r.ko.Spec.AZMode)
	}
	res.SetApplyImmediately(true)
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetAuthToken(tmpSecret)
		}
	}
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Spec.AutoMinorVersionUpgrade)
	}
	if r.ko.Spec.CacheClusterID != nil {
		res.SetCacheClusterId(*r.ko.Spec.CacheClusterID)
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.SetCacheNodeType(*r.ko.Spec.CacheNodeType)
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.SetCacheParameterGroupName(*r.ko.Spec.CacheParameterGroupName)
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		f9 := []*string{}
		for _, f9iter := range r.ko.Spec.CacheSecurityGroupNames {
			var f9elem string
			f9elem = *f9iter
			f9 = append(f9, &f9elem)
		}
		res.SetCacheSecurityGroupNames(f9)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.IPDiscovery != nil {
		res.SetIpDiscovery(*r.ko.Spec.IPDiscovery)
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f12 := []*svcsdk.LogDeliveryConfigurationRequest{}
		for _, f12iter := range r.ko.Spec.LogDeliveryConfigurations {
			f12elem := &svcsdk.LogDeliveryConfigurationRequest{}
			if f12iter.DestinationDetails != nil {
				f12elemf0 := &svcsdk.DestinationDetails{}
				if f12iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f12elemf0f0 := &svcsdk.CloudWatchLogsDestinationDetails{}
					if f12iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f12elemf0f0.SetLogGroup(*f12iter.DestinationDetails.CloudWatchLogsDetails.LogGroup)
					}
					f12elemf0.SetCloudWatchLogsDetails(f12elemf0f0)
				}
				if f12iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f12elemf0f1 := &svcsdk.KinesisFirehoseDestinationDetails{}
					if f12iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f12elemf0f1.SetDeliveryStream(*f12iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream)
					}
					f12elemf0.SetKinesisFirehoseDetails(f12elemf0f1)
				}
				f12elem.SetDestinationDetails(f12elemf0)
			}
			if f12iter.DestinationType != nil {
				f12elem.SetDestinationType(*f12iter.DestinationType)
			}
			if f12iter.Enabled != nil {
				f12elem.SetEnabled(*f12iter.Enabled)
			}
			if f12iter.LogFormat != nil {
				f12elem.SetLogFormat(*f12iter.LogFormat)
			}
			if f12iter.LogType != nil {
				f12elem.SetLogType(*f12iter.LogType)
			}
			f12 = append(f12, f12elem)
		}
		res.SetLogDeliveryConfigurations(f12)
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*r.ko.Spec.NotificationTopicARN)
	}
	if r.ko.Spec.NumCacheNodes != nil {
		res.SetNumCacheNodes(*r.ko.Spec.NumCacheNodes)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f18 := []*string{}
		for _, f18iter := range r.ko.Spec.SecurityGroupIDs {
			var f18elem string
			f18elem = *f18iter
			f18 = append(f18, &f18elem)
		}
		res.SetSecurityGroupIds(f18)
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*r.ko.Spec.SnapshotRetentionLimit)
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SetSnapshotWindow(*r.ko.Spec.SnapshotWindow)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if isDeleting(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileDeleting
	}
	if isModifying(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgNoDeleteWhileModifying,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileModifying
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteCacheClusterOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteCacheClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteCacheCluster", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteCacheClusterInput, error) {
	res := &svcsdk.DeleteCacheClusterInput{}

	if r.ko.Spec.CacheClusterID != nil {
		res.SetCacheClusterId(*r.ko.Spec.CacheClusterID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.CacheCluster,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ReplicationGroupNotFoundFault",
		"InvalidReplicationGroupStateFault",
		"CacheClusterAlreadyExistsFault",
		"InsufficientCacheClusterCapacityFault",
		"CacheSecurityGroupNotFoundFault",
		"CacheSubnetGroupNotFoundFault",
		"ClusterQuotaForCustomerExceededFault",
		"NodeQuotaForClusterExceededFault",
		"NodeQuotaForCustomerExceededFault",
		"CacheParameterGroupNotFoundFault",
		"InvalidVPCNetworkStateFault",
		"TagQuotaPerResource",
		"InvalidParameterValue",
		"InvalidParameterCombination":
		return true
	default:
		return false
	}
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.CacheParameterGroupName") {
		fields = append(fields, "CacheParameterGroupName")
	}
	if delta.DifferentAt("Spec.LogDeliveryConfigurations") {
		fields = append(fields, "LogDeliveryConfigurations")
	}
	if delta.DifferentAt("Spec.ReplicationGroupID") {
		fields = append(fields, "ReplicationGroupID")
	}
	if delta.DifferentAt("Spec.SnapshotName") {
		fields = append(fields, "SnapshotName")
	}

	return fields
}
