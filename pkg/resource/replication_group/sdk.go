// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package replication_group

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/elasticache"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elasticache-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.ReplicationGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeReplicationGroupsOutput
	resp, err = rm.sdkapi.DescribeReplicationGroups(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeReplicationGroups", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ReplicationGroupNotFoundFault" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.ReplicationGroups {
		if elem.ARN != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ARN)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.AtRestEncryptionEnabled != nil {
			ko.Spec.AtRestEncryptionEnabled = elem.AtRestEncryptionEnabled
		} else {
			ko.Spec.AtRestEncryptionEnabled = nil
		}
		if elem.AuthTokenEnabled != nil {
			ko.Status.AuthTokenEnabled = elem.AuthTokenEnabled
		} else {
			ko.Status.AuthTokenEnabled = nil
		}
		if elem.AuthTokenLastModifiedDate != nil {
			ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*elem.AuthTokenLastModifiedDate}
		} else {
			ko.Status.AuthTokenLastModifiedDate = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			ko.Status.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			ko.Status.AutoMinorVersionUpgrade = nil
		}
		if elem.AutomaticFailover != "" {
			ko.Status.AutomaticFailover = aws.String(string(elem.AutomaticFailover))
		} else {
			ko.Status.AutomaticFailover = nil
		}
		if elem.CacheNodeType != nil {
			ko.Spec.CacheNodeType = elem.CacheNodeType
		} else {
			ko.Spec.CacheNodeType = nil
		}
		if elem.ClusterEnabled != nil {
			ko.Status.ClusterEnabled = elem.ClusterEnabled
		} else {
			ko.Status.ClusterEnabled = nil
		}
		if elem.ConfigurationEndpoint != nil {
			f8 := &svcapitypes.Endpoint{}
			if elem.ConfigurationEndpoint.Address != nil {
				f8.Address = elem.ConfigurationEndpoint.Address
			}
			if elem.ConfigurationEndpoint.Port != nil {
				portCopy := int64(*elem.ConfigurationEndpoint.Port)
				f8.Port = &portCopy
			}
			ko.Status.ConfigurationEndpoint = f8
		} else {
			ko.Status.ConfigurationEndpoint = nil
		}
		if elem.DataTiering != "" {
			ko.Status.DataTiering = aws.String(string(elem.DataTiering))
		} else {
			ko.Status.DataTiering = nil
		}
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		} else {
			ko.Spec.Description = nil
		}
		if elem.Engine != nil {
			ko.Spec.Engine = elem.Engine
		} else {
			ko.Spec.Engine = nil
		}
		if elem.GlobalReplicationGroupInfo != nil {
			f12 := &svcapitypes.GlobalReplicationGroupInfo{}
			if elem.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
				f12.GlobalReplicationGroupID = elem.GlobalReplicationGroupInfo.GlobalReplicationGroupId
			}
			if elem.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
				f12.GlobalReplicationGroupMemberRole = elem.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
			}
			ko.Status.GlobalReplicationGroupInfo = f12
		} else {
			ko.Status.GlobalReplicationGroupInfo = nil
		}
		if elem.IpDiscovery != "" {
			ko.Spec.IPDiscovery = aws.String(string(elem.IpDiscovery))
		} else {
			ko.Spec.IPDiscovery = nil
		}
		if elem.KmsKeyId != nil {
			ko.Spec.KMSKeyID = elem.KmsKeyId
		} else {
			ko.Spec.KMSKeyID = nil
		}
		if elem.LogDeliveryConfigurations != nil {
			f15 := []*svcapitypes.LogDeliveryConfigurationRequest{}
			for _, f15iter := range elem.LogDeliveryConfigurations {
				f15elem := &svcapitypes.LogDeliveryConfigurationRequest{}
				if f15iter.DestinationDetails != nil {
					f15elemf0 := &svcapitypes.DestinationDetails{}
					if f15iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f15elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f15elemf0f0.LogGroup = f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f15elemf0.CloudWatchLogsDetails = f15elemf0f0
					}
					if f15iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f15elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f15elemf0f1.DeliveryStream = f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f15elemf0.KinesisFirehoseDetails = f15elemf0f1
					}
					f15elem.DestinationDetails = f15elemf0
				}
				if f15iter.DestinationType != "" {
					f15elem.DestinationType = aws.String(string(f15iter.DestinationType))
				}
				if f15iter.LogFormat != "" {
					f15elem.LogFormat = aws.String(string(f15iter.LogFormat))
				}
				if f15iter.LogType != "" {
					f15elem.LogType = aws.String(string(f15iter.LogType))
				}
				f15 = append(f15, f15elem)
			}
			ko.Spec.LogDeliveryConfigurations = f15
		} else {
			ko.Spec.LogDeliveryConfigurations = nil
		}
		if elem.MemberClusters != nil {
			ko.Status.MemberClusters = aws.StringSlice(elem.MemberClusters)
		} else {
			ko.Status.MemberClusters = nil
		}
		if elem.MemberClustersOutpostArns != nil {
			ko.Status.MemberClustersOutpostARNs = aws.StringSlice(elem.MemberClustersOutpostArns)
		} else {
			ko.Status.MemberClustersOutpostARNs = nil
		}
		if elem.MultiAZ != "" {
			ko.Status.MultiAZ = aws.String(string(elem.MultiAZ))
		} else {
			ko.Status.MultiAZ = nil
		}
		if elem.NetworkType != "" {
			ko.Spec.NetworkType = aws.String(string(elem.NetworkType))
		} else {
			ko.Spec.NetworkType = nil
		}
		if elem.NodeGroups != nil {
			f20 := []*svcapitypes.NodeGroup{}
			for _, f20iter := range elem.NodeGroups {
				f20elem := &svcapitypes.NodeGroup{}
				if f20iter.NodeGroupId != nil {
					f20elem.NodeGroupID = f20iter.NodeGroupId
				}
				if f20iter.NodeGroupMembers != nil {
					f20elemf1 := []*svcapitypes.NodeGroupMember{}
					for _, f20elemf1iter := range f20iter.NodeGroupMembers {
						f20elemf1elem := &svcapitypes.NodeGroupMember{}
						if f20elemf1iter.CacheClusterId != nil {
							f20elemf1elem.CacheClusterID = f20elemf1iter.CacheClusterId
						}
						if f20elemf1iter.CacheNodeId != nil {
							f20elemf1elem.CacheNodeID = f20elemf1iter.CacheNodeId
						}
						if f20elemf1iter.CurrentRole != nil {
							f20elemf1elem.CurrentRole = f20elemf1iter.CurrentRole
						}
						if f20elemf1iter.PreferredAvailabilityZone != nil {
							f20elemf1elem.PreferredAvailabilityZone = f20elemf1iter.PreferredAvailabilityZone
						}
						if f20elemf1iter.PreferredOutpostArn != nil {
							f20elemf1elem.PreferredOutpostARN = f20elemf1iter.PreferredOutpostArn
						}
						if f20elemf1iter.ReadEndpoint != nil {
							f20elemf1elemf5 := &svcapitypes.Endpoint{}
							if f20elemf1iter.ReadEndpoint.Address != nil {
								f20elemf1elemf5.Address = f20elemf1iter.ReadEndpoint.Address
							}
							if f20elemf1iter.ReadEndpoint.Port != nil {
								portCopy := int64(*f20elemf1iter.ReadEndpoint.Port)
								f20elemf1elemf5.Port = &portCopy
							}
							f20elemf1elem.ReadEndpoint = f20elemf1elemf5
						}
						f20elemf1 = append(f20elemf1, f20elemf1elem)
					}
					f20elem.NodeGroupMembers = f20elemf1
				}
				if f20iter.PrimaryEndpoint != nil {
					f20elemf2 := &svcapitypes.Endpoint{}
					if f20iter.PrimaryEndpoint.Address != nil {
						f20elemf2.Address = f20iter.PrimaryEndpoint.Address
					}
					if f20iter.PrimaryEndpoint.Port != nil {
						portCopy := int64(*f20iter.PrimaryEndpoint.Port)
						f20elemf2.Port = &portCopy
					}
					f20elem.PrimaryEndpoint = f20elemf2
				}
				if f20iter.ReaderEndpoint != nil {
					f20elemf3 := &svcapitypes.Endpoint{}
					if f20iter.ReaderEndpoint.Address != nil {
						f20elemf3.Address = f20iter.ReaderEndpoint.Address
					}
					if f20iter.ReaderEndpoint.Port != nil {
						portCopy := int64(*f20iter.ReaderEndpoint.Port)
						f20elemf3.Port = &portCopy
					}
					f20elem.ReaderEndpoint = f20elemf3
				}
				if f20iter.Slots != nil {
					f20elem.Slots = f20iter.Slots
				}
				if f20iter.Status != nil {
					f20elem.Status = f20iter.Status
				}
				f20 = append(f20, f20elem)
			}
			ko.Status.NodeGroups = f20
		} else {
			ko.Status.NodeGroups = nil
		}
		if elem.PendingModifiedValues != nil {
			f21 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
			if elem.PendingModifiedValues.AuthTokenStatus != "" {
				f21.AuthTokenStatus = aws.String(string(elem.PendingModifiedValues.AuthTokenStatus))
			}
			if elem.PendingModifiedValues.AutomaticFailoverStatus != "" {
				f21.AutomaticFailoverStatus = aws.String(string(elem.PendingModifiedValues.AutomaticFailoverStatus))
			}
			if elem.PendingModifiedValues.LogDeliveryConfigurations != nil {
				f21f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
				for _, f21f2iter := range elem.PendingModifiedValues.LogDeliveryConfigurations {
					f21f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
					if f21f2iter.DestinationDetails != nil {
						f21f2elemf0 := &svcapitypes.DestinationDetails{}
						if f21f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
							f21f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
							if f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
								f21f2elemf0f0.LogGroup = f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
							}
							f21f2elemf0.CloudWatchLogsDetails = f21f2elemf0f0
						}
						if f21f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
							f21f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
							if f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
								f21f2elemf0f1.DeliveryStream = f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
							}
							f21f2elemf0.KinesisFirehoseDetails = f21f2elemf0f1
						}
						f21f2elem.DestinationDetails = f21f2elemf0
					}
					if f21f2iter.DestinationType != "" {
						f21f2elem.DestinationType = aws.String(string(f21f2iter.DestinationType))
					}
					if f21f2iter.LogFormat != "" {
						f21f2elem.LogFormat = aws.String(string(f21f2iter.LogFormat))
					}
					if f21f2iter.LogType != "" {
						f21f2elem.LogType = aws.String(string(f21f2iter.LogType))
					}
					f21f2 = append(f21f2, f21f2elem)
				}
				f21.LogDeliveryConfigurations = f21f2
			}
			if elem.PendingModifiedValues.PrimaryClusterId != nil {
				f21.PrimaryClusterID = elem.PendingModifiedValues.PrimaryClusterId
			}
			if elem.PendingModifiedValues.Resharding != nil {
				f21f4 := &svcapitypes.ReshardingStatus{}
				if elem.PendingModifiedValues.Resharding.SlotMigration != nil {
					f21f4f0 := &svcapitypes.SlotMigration{}
					if elem.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
						f21f4f0.ProgressPercentage = elem.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
					}
					f21f4.SlotMigration = f21f4f0
				}
				f21.Resharding = f21f4
			}
			if elem.PendingModifiedValues.UserGroups != nil {
				f21f5 := &svcapitypes.UserGroupsUpdateStatus{}
				if elem.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
					f21f5.UserGroupIDsToAdd = aws.StringSlice(elem.PendingModifiedValues.UserGroups.UserGroupIdsToAdd)
				}
				if elem.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
					f21f5.UserGroupIDsToRemove = aws.StringSlice(elem.PendingModifiedValues.UserGroups.UserGroupIdsToRemove)
				}
				f21.UserGroups = f21f5
			}
			ko.Status.PendingModifiedValues = f21
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.ReplicationGroupCreateTime != nil {
			ko.Status.ReplicationGroupCreateTime = &metav1.Time{*elem.ReplicationGroupCreateTime}
		} else {
			ko.Status.ReplicationGroupCreateTime = nil
		}
		if elem.ReplicationGroupId != nil {
			ko.Spec.ReplicationGroupID = elem.ReplicationGroupId
		} else {
			ko.Spec.ReplicationGroupID = nil
		}
		if elem.SnapshotRetentionLimit != nil {
			snapshotRetentionLimitCopy := int64(*elem.SnapshotRetentionLimit)
			ko.Spec.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
		} else {
			ko.Spec.SnapshotRetentionLimit = nil
		}
		if elem.SnapshotWindow != nil {
			ko.Spec.SnapshotWindow = elem.SnapshotWindow
		} else {
			ko.Spec.SnapshotWindow = nil
		}
		if elem.SnapshottingClusterId != nil {
			ko.Status.SnapshottingClusterID = elem.SnapshottingClusterId
		} else {
			ko.Status.SnapshottingClusterID = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.TransitEncryptionEnabled != nil {
			ko.Spec.TransitEncryptionEnabled = elem.TransitEncryptionEnabled
		} else {
			ko.Spec.TransitEncryptionEnabled = nil
		}
		if elem.UserGroupIds != nil {
			ko.Spec.UserGroupIDs = aws.StringSlice(elem.UserGroupIds)
		} else {
			ko.Spec.UserGroupIDs = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomDescribeReplicationGroupsSetOutput(ctx, r, resp, ko)
	if err != nil {
		return nil, err
	}

	rm.updateSpecFields(ctx, resp.ReplicationGroups[0], &resource{ko})
	if isDeleting(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		return &resource{ko}, nil
	}
	if isModifying(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgNoDeleteWhileModifying,
			nil,
		)
		return &resource{ko}, nil
	}

	if isCreating(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgCurrentlyCreating,
			nil,
		)
		return &resource{ko}, nil
	}

	if isCreateFailed(r) {
		// This is a terminal state and by setting a Terminal condition on the
		// resource, we will prevent it from being requeued.
		ackcondition.SetTerminal(
			&resource{ko},
			corev1.ConditionTrue,
			&condMsgTerminalCreateFailed,
			nil,
		)
		return &resource{ko}, nil
	}

	if ko.Status.ACKResourceMetadata != nil && ko.Status.ACKResourceMetadata.ARN != nil {
		resourceARN := (*string)(ko.Status.ACKResourceMetadata.ARN)
		tags, err := rm.getTags(ctx, *resourceARN)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Spec.ReplicationGroupID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeReplicationGroupsInput, error) {
	res := &svcsdk.DescribeReplicationGroupsInput{}

	if r.ko.Spec.ReplicationGroupID != nil {
		res.ReplicationGroupId = r.ko.Spec.ReplicationGroupID
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.CreateReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != "" {
		ko.Status.AutomaticFailover = aws.String(string(resp.ReplicationGroup.AutomaticFailover))
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			portCopy := int64(*resp.ReplicationGroup.ConfigurationEndpoint.Port)
			f8.Port = &portCopy
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != "" {
		ko.Status.DataTiering = aws.String(string(resp.ReplicationGroup.DataTiering))
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.Engine != nil {
		ko.Spec.Engine = resp.ReplicationGroup.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f12 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f12.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f12.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f12
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.IpDiscovery != "" {
		ko.Spec.IPDiscovery = aws.String(string(resp.ReplicationGroup.IpDiscovery))
	} else {
		ko.Spec.IPDiscovery = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f15 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f15iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f15elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f15iter.DestinationDetails != nil {
				f15elemf0 := &svcapitypes.DestinationDetails{}
				if f15iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f15elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f15elemf0f0.LogGroup = f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f15elemf0.CloudWatchLogsDetails = f15elemf0f0
				}
				if f15iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f15elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f15elemf0f1.DeliveryStream = f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f15elemf0.KinesisFirehoseDetails = f15elemf0f1
				}
				f15elem.DestinationDetails = f15elemf0
			}
			if f15iter.DestinationType != "" {
				f15elem.DestinationType = aws.String(string(f15iter.DestinationType))
			}
			if f15iter.LogFormat != "" {
				f15elem.LogFormat = aws.String(string(f15iter.LogFormat))
			}
			if f15iter.LogType != "" {
				f15elem.LogType = aws.String(string(f15iter.LogType))
			}
			f15 = append(f15, f15elem)
		}
		ko.Spec.LogDeliveryConfigurations = f15
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		ko.Status.MemberClusters = aws.StringSlice(resp.ReplicationGroup.MemberClusters)
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		ko.Status.MemberClustersOutpostARNs = aws.StringSlice(resp.ReplicationGroup.MemberClustersOutpostArns)
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != "" {
		ko.Status.MultiAZ = aws.String(string(resp.ReplicationGroup.MultiAZ))
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NetworkType != "" {
		ko.Spec.NetworkType = aws.String(string(resp.ReplicationGroup.NetworkType))
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f20 := []*svcapitypes.NodeGroup{}
		for _, f20iter := range resp.ReplicationGroup.NodeGroups {
			f20elem := &svcapitypes.NodeGroup{}
			if f20iter.NodeGroupId != nil {
				f20elem.NodeGroupID = f20iter.NodeGroupId
			}
			if f20iter.NodeGroupMembers != nil {
				f20elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f20elemf1iter := range f20iter.NodeGroupMembers {
					f20elemf1elem := &svcapitypes.NodeGroupMember{}
					if f20elemf1iter.CacheClusterId != nil {
						f20elemf1elem.CacheClusterID = f20elemf1iter.CacheClusterId
					}
					if f20elemf1iter.CacheNodeId != nil {
						f20elemf1elem.CacheNodeID = f20elemf1iter.CacheNodeId
					}
					if f20elemf1iter.CurrentRole != nil {
						f20elemf1elem.CurrentRole = f20elemf1iter.CurrentRole
					}
					if f20elemf1iter.PreferredAvailabilityZone != nil {
						f20elemf1elem.PreferredAvailabilityZone = f20elemf1iter.PreferredAvailabilityZone
					}
					if f20elemf1iter.PreferredOutpostArn != nil {
						f20elemf1elem.PreferredOutpostARN = f20elemf1iter.PreferredOutpostArn
					}
					if f20elemf1iter.ReadEndpoint != nil {
						f20elemf1elemf5 := &svcapitypes.Endpoint{}
						if f20elemf1iter.ReadEndpoint.Address != nil {
							f20elemf1elemf5.Address = f20elemf1iter.ReadEndpoint.Address
						}
						if f20elemf1iter.ReadEndpoint.Port != nil {
							portCopy := int64(*f20elemf1iter.ReadEndpoint.Port)
							f20elemf1elemf5.Port = &portCopy
						}
						f20elemf1elem.ReadEndpoint = f20elemf1elemf5
					}
					f20elemf1 = append(f20elemf1, f20elemf1elem)
				}
				f20elem.NodeGroupMembers = f20elemf1
			}
			if f20iter.PrimaryEndpoint != nil {
				f20elemf2 := &svcapitypes.Endpoint{}
				if f20iter.PrimaryEndpoint.Address != nil {
					f20elemf2.Address = f20iter.PrimaryEndpoint.Address
				}
				if f20iter.PrimaryEndpoint.Port != nil {
					portCopy := int64(*f20iter.PrimaryEndpoint.Port)
					f20elemf2.Port = &portCopy
				}
				f20elem.PrimaryEndpoint = f20elemf2
			}
			if f20iter.ReaderEndpoint != nil {
				f20elemf3 := &svcapitypes.Endpoint{}
				if f20iter.ReaderEndpoint.Address != nil {
					f20elemf3.Address = f20iter.ReaderEndpoint.Address
				}
				if f20iter.ReaderEndpoint.Port != nil {
					portCopy := int64(*f20iter.ReaderEndpoint.Port)
					f20elemf3.Port = &portCopy
				}
				f20elem.ReaderEndpoint = f20elemf3
			}
			if f20iter.Slots != nil {
				f20elem.Slots = f20iter.Slots
			}
			if f20iter.Status != nil {
				f20elem.Status = f20iter.Status
			}
			f20 = append(f20, f20elem)
		}
		ko.Status.NodeGroups = f20
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f21 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != "" {
			f21.AuthTokenStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != "" {
			f21.AutomaticFailoverStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f21f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f21f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f21f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f21f2iter.DestinationDetails != nil {
					f21f2elemf0 := &svcapitypes.DestinationDetails{}
					if f21f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f21f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f21f2elemf0f0.LogGroup = f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f21f2elemf0.CloudWatchLogsDetails = f21f2elemf0f0
					}
					if f21f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f21f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f21f2elemf0f1.DeliveryStream = f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f21f2elemf0.KinesisFirehoseDetails = f21f2elemf0f1
					}
					f21f2elem.DestinationDetails = f21f2elemf0
				}
				if f21f2iter.DestinationType != "" {
					f21f2elem.DestinationType = aws.String(string(f21f2iter.DestinationType))
				}
				if f21f2iter.LogFormat != "" {
					f21f2elem.LogFormat = aws.String(string(f21f2iter.LogFormat))
				}
				if f21f2iter.LogType != "" {
					f21f2elem.LogType = aws.String(string(f21f2iter.LogType))
				}
				f21f2 = append(f21f2, f21f2elem)
			}
			f21.LogDeliveryConfigurations = f21f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f21.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f21f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f21f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f21f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f21f4.SlotMigration = f21f4f0
			}
			f21.Resharding = f21f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f21f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f21f5.UserGroupIDsToAdd = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd)
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f21f5.UserGroupIDsToRemove = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove)
			}
			f21.UserGroups = f21f5
		}
		ko.Status.PendingModifiedValues = f21
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		snapshotRetentionLimitCopy := int64(*resp.ReplicationGroup.SnapshotRetentionLimit)
		ko.Spec.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		ko.Spec.UserGroupIDs = aws.StringSlice(resp.ReplicationGroup.UserGroupIds)
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomCreateReplicationGroupSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateReplicationGroupInput, error) {
	res := &svcsdk.CreateReplicationGroupInput{}

	if r.ko.Spec.AtRestEncryptionEnabled != nil {
		res.AtRestEncryptionEnabled = r.ko.Spec.AtRestEncryptionEnabled
	}
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.AuthToken = aws.String(tmpSecret)
		}
	}
	if r.ko.Spec.AutomaticFailoverEnabled != nil {
		res.AutomaticFailoverEnabled = r.ko.Spec.AutomaticFailoverEnabled
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.CacheNodeType = r.ko.Spec.CacheNodeType
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.CacheParameterGroupName = r.ko.Spec.CacheParameterGroupName
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		res.CacheSecurityGroupNames = aws.ToStringSlice(r.ko.Spec.CacheSecurityGroupNames)
	}
	if r.ko.Spec.CacheSubnetGroupName != nil {
		res.CacheSubnetGroupName = r.ko.Spec.CacheSubnetGroupName
	}
	if r.ko.Spec.DataTieringEnabled != nil {
		res.DataTieringEnabled = r.ko.Spec.DataTieringEnabled
	}
	if r.ko.Spec.Engine != nil {
		res.Engine = r.ko.Spec.Engine
	}
	if r.ko.Spec.EngineVersion != nil {
		res.EngineVersion = r.ko.Spec.EngineVersion
	}
	if r.ko.Spec.IPDiscovery != nil {
		res.IpDiscovery = svcsdktypes.IpDiscovery(*r.ko.Spec.IPDiscovery)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.KmsKeyId = r.ko.Spec.KMSKeyID
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f12 := []svcsdktypes.LogDeliveryConfigurationRequest{}
		for _, f12iter := range r.ko.Spec.LogDeliveryConfigurations {
			f12elem := &svcsdktypes.LogDeliveryConfigurationRequest{}
			if f12iter.DestinationDetails != nil {
				f12elemf0 := &svcsdktypes.DestinationDetails{}
				if f12iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f12elemf0f0 := &svcsdktypes.CloudWatchLogsDestinationDetails{}
					if f12iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f12elemf0f0.LogGroup = f12iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f12elemf0.CloudWatchLogsDetails = f12elemf0f0
				}
				if f12iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f12elemf0f1 := &svcsdktypes.KinesisFirehoseDestinationDetails{}
					if f12iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f12elemf0f1.DeliveryStream = f12iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f12elemf0.KinesisFirehoseDetails = f12elemf0f1
				}
				f12elem.DestinationDetails = f12elemf0
			}
			if f12iter.DestinationType != nil {
				f12elem.DestinationType = svcsdktypes.DestinationType(*f12iter.DestinationType)
			}
			if f12iter.Enabled != nil {
				f12elem.Enabled = f12iter.Enabled
			}
			if f12iter.LogFormat != nil {
				f12elem.LogFormat = svcsdktypes.LogFormat(*f12iter.LogFormat)
			}
			if f12iter.LogType != nil {
				f12elem.LogType = svcsdktypes.LogType(*f12iter.LogType)
			}
			f12 = append(f12, *f12elem)
		}
		res.LogDeliveryConfigurations = f12
	}
	if r.ko.Spec.MultiAZEnabled != nil {
		res.MultiAZEnabled = r.ko.Spec.MultiAZEnabled
	}
	if r.ko.Spec.NetworkType != nil {
		res.NetworkType = svcsdktypes.NetworkType(*r.ko.Spec.NetworkType)
	}
	if r.ko.Spec.NodeGroupConfiguration != nil {
		f15 := []svcsdktypes.NodeGroupConfiguration{}
		for _, f15iter := range r.ko.Spec.NodeGroupConfiguration {
			f15elem := &svcsdktypes.NodeGroupConfiguration{}
			if f15iter.NodeGroupID != nil {
				f15elem.NodeGroupId = f15iter.NodeGroupID
			}
			if f15iter.PrimaryAvailabilityZone != nil {
				f15elem.PrimaryAvailabilityZone = f15iter.PrimaryAvailabilityZone
			}
			if f15iter.PrimaryOutpostARN != nil {
				f15elem.PrimaryOutpostArn = f15iter.PrimaryOutpostARN
			}
			if f15iter.ReplicaAvailabilityZones != nil {
				f15elem.ReplicaAvailabilityZones = aws.ToStringSlice(f15iter.ReplicaAvailabilityZones)
			}
			if f15iter.ReplicaCount != nil {
				replicaCountCopy0 := *f15iter.ReplicaCount
				if replicaCountCopy0 > math.MaxInt32 || replicaCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ReplicaCount is of type int32")
				}
				replicaCountCopy := int32(replicaCountCopy0)
				f15elem.ReplicaCount = &replicaCountCopy
			}
			if f15iter.ReplicaOutpostARNs != nil {
				f15elem.ReplicaOutpostArns = aws.ToStringSlice(f15iter.ReplicaOutpostARNs)
			}
			if f15iter.Slots != nil {
				f15elem.Slots = f15iter.Slots
			}
			f15 = append(f15, *f15elem)
		}
		res.NodeGroupConfiguration = f15
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.NotificationTopicArn = r.ko.Spec.NotificationTopicARN
	}
	if r.ko.Spec.NumNodeGroups != nil {
		numNodeGroupsCopy0 := *r.ko.Spec.NumNodeGroups
		if numNodeGroupsCopy0 > math.MaxInt32 || numNodeGroupsCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field NumNodeGroups is of type int32")
		}
		numNodeGroupsCopy := int32(numNodeGroupsCopy0)
		res.NumNodeGroups = &numNodeGroupsCopy
	}
	if r.ko.Spec.Port != nil {
		portCopy0 := *r.ko.Spec.Port
		if portCopy0 > math.MaxInt32 || portCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field Port is of type int32")
		}
		portCopy := int32(portCopy0)
		res.Port = &portCopy
	}
	if r.ko.Spec.PreferredCacheClusterAZs != nil {
		res.PreferredCacheClusterAZs = aws.ToStringSlice(r.ko.Spec.PreferredCacheClusterAZs)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.PreferredMaintenanceWindow = r.ko.Spec.PreferredMaintenanceWindow
	}
	if r.ko.Spec.PrimaryClusterID != nil {
		res.PrimaryClusterId = r.ko.Spec.PrimaryClusterID
	}
	if r.ko.Spec.ReplicasPerNodeGroup != nil {
		replicasPerNodeGroupCopy0 := *r.ko.Spec.ReplicasPerNodeGroup
		if replicasPerNodeGroupCopy0 > math.MaxInt32 || replicasPerNodeGroupCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field ReplicasPerNodeGroup is of type int32")
		}
		replicasPerNodeGroupCopy := int32(replicasPerNodeGroupCopy0)
		res.ReplicasPerNodeGroup = &replicasPerNodeGroupCopy
	}
	if r.ko.Spec.Description != nil {
		res.ReplicationGroupDescription = r.ko.Spec.Description
	}
	if r.ko.Spec.ReplicationGroupID != nil {
		res.ReplicationGroupId = r.ko.Spec.ReplicationGroupID
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		res.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.SecurityGroupIDs)
	}
	if r.ko.Spec.SnapshotARNs != nil {
		res.SnapshotArns = aws.ToStringSlice(r.ko.Spec.SnapshotARNs)
	}
	if r.ko.Spec.SnapshotName != nil {
		res.SnapshotName = r.ko.Spec.SnapshotName
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		snapshotRetentionLimitCopy0 := *r.ko.Spec.SnapshotRetentionLimit
		if snapshotRetentionLimitCopy0 > math.MaxInt32 || snapshotRetentionLimitCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field SnapshotRetentionLimit is of type int32")
		}
		snapshotRetentionLimitCopy := int32(snapshotRetentionLimitCopy0)
		res.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SnapshotWindow = r.ko.Spec.SnapshotWindow
	}
	if r.ko.Spec.Tags != nil {
		f30 := []svcsdktypes.Tag{}
		for _, f30iter := range r.ko.Spec.Tags {
			f30elem := &svcsdktypes.Tag{}
			if f30iter.Key != nil {
				f30elem.Key = f30iter.Key
			}
			if f30iter.Value != nil {
				f30elem.Value = f30iter.Value
			}
			f30 = append(f30, *f30elem)
		}
		res.Tags = f30
	}
	if r.ko.Spec.TransitEncryptionEnabled != nil {
		res.TransitEncryptionEnabled = r.ko.Spec.TransitEncryptionEnabled
	}
	if r.ko.Spec.UserGroupIDs != nil {
		res.UserGroupIds = aws.ToStringSlice(r.ko.Spec.UserGroupIDs)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	}

	updated, err = rm.CustomModifyReplicationGroup(ctx, desired, latest, delta)
	if updated != nil || err != nil {
		return updated, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if !delta.DifferentAt("Spec.LogDeliveryConfigurations") {
		input.LogDeliveryConfigurations = nil
	}
	if !delta.DifferentAt("Spec.TransitEncryptionEnabled") {
		input.TransitEncryptionEnabled = nil
	}
	if delta.DifferentAt("UserGroupIDs") {
		for _, diff := range delta.Differences {
			if diff.Path.Contains("UserGroupIDs") {
				existingUserGroups := diff.B.([]*string)
				requiredUserGroups := diff.A.([]*string)

				// User groups to add
				{
					var userGroupsToAdd []string

					for _, requiredUserGroup := range requiredUserGroups {
						found := false
						for _, existingUserGroup := range existingUserGroups {
							if requiredUserGroup == existingUserGroup {
								found = true
								break
							}
						}

						if !found {
							if requiredUserGroup != nil {
								userGroupsToAdd = append(userGroupsToAdd, *requiredUserGroup)
							}
						}
					}

					input.UserGroupIdsToAdd = userGroupsToAdd
				}

				// User groups to remove
				{
					var userGroupsToRemove []string

					for _, existingUserGroup := range existingUserGroups {
						found := false
						for _, requiredUserGroup := range requiredUserGroups {
							if requiredUserGroup == existingUserGroup {
								found = true
								break
							}
						}

						if !found {
							if existingUserGroup != nil {
								userGroupsToRemove = append(userGroupsToRemove, *existingUserGroup)
							}
						}
					}

					input.UserGroupIdsToRemove = userGroupsToRemove
				}
			}
		}
	}

	var resp *svcsdk.ModifyReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != "" {
		ko.Status.AutomaticFailover = aws.String(string(resp.ReplicationGroup.AutomaticFailover))
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			portCopy := int64(*resp.ReplicationGroup.ConfigurationEndpoint.Port)
			f8.Port = &portCopy
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != "" {
		ko.Status.DataTiering = aws.String(string(resp.ReplicationGroup.DataTiering))
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.Engine != nil {
		ko.Spec.Engine = resp.ReplicationGroup.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f12 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f12.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f12.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f12
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.IpDiscovery != "" {
		ko.Spec.IPDiscovery = aws.String(string(resp.ReplicationGroup.IpDiscovery))
	} else {
		ko.Spec.IPDiscovery = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f15 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f15iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f15elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f15iter.DestinationDetails != nil {
				f15elemf0 := &svcapitypes.DestinationDetails{}
				if f15iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f15elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f15elemf0f0.LogGroup = f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f15elemf0.CloudWatchLogsDetails = f15elemf0f0
				}
				if f15iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f15elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f15elemf0f1.DeliveryStream = f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f15elemf0.KinesisFirehoseDetails = f15elemf0f1
				}
				f15elem.DestinationDetails = f15elemf0
			}
			if f15iter.DestinationType != "" {
				f15elem.DestinationType = aws.String(string(f15iter.DestinationType))
			}
			if f15iter.LogFormat != "" {
				f15elem.LogFormat = aws.String(string(f15iter.LogFormat))
			}
			if f15iter.LogType != "" {
				f15elem.LogType = aws.String(string(f15iter.LogType))
			}
			f15 = append(f15, f15elem)
		}
		ko.Spec.LogDeliveryConfigurations = f15
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		ko.Status.MemberClusters = aws.StringSlice(resp.ReplicationGroup.MemberClusters)
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		ko.Status.MemberClustersOutpostARNs = aws.StringSlice(resp.ReplicationGroup.MemberClustersOutpostArns)
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != "" {
		ko.Status.MultiAZ = aws.String(string(resp.ReplicationGroup.MultiAZ))
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NetworkType != "" {
		ko.Spec.NetworkType = aws.String(string(resp.ReplicationGroup.NetworkType))
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f20 := []*svcapitypes.NodeGroup{}
		for _, f20iter := range resp.ReplicationGroup.NodeGroups {
			f20elem := &svcapitypes.NodeGroup{}
			if f20iter.NodeGroupId != nil {
				f20elem.NodeGroupID = f20iter.NodeGroupId
			}
			if f20iter.NodeGroupMembers != nil {
				f20elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f20elemf1iter := range f20iter.NodeGroupMembers {
					f20elemf1elem := &svcapitypes.NodeGroupMember{}
					if f20elemf1iter.CacheClusterId != nil {
						f20elemf1elem.CacheClusterID = f20elemf1iter.CacheClusterId
					}
					if f20elemf1iter.CacheNodeId != nil {
						f20elemf1elem.CacheNodeID = f20elemf1iter.CacheNodeId
					}
					if f20elemf1iter.CurrentRole != nil {
						f20elemf1elem.CurrentRole = f20elemf1iter.CurrentRole
					}
					if f20elemf1iter.PreferredAvailabilityZone != nil {
						f20elemf1elem.PreferredAvailabilityZone = f20elemf1iter.PreferredAvailabilityZone
					}
					if f20elemf1iter.PreferredOutpostArn != nil {
						f20elemf1elem.PreferredOutpostARN = f20elemf1iter.PreferredOutpostArn
					}
					if f20elemf1iter.ReadEndpoint != nil {
						f20elemf1elemf5 := &svcapitypes.Endpoint{}
						if f20elemf1iter.ReadEndpoint.Address != nil {
							f20elemf1elemf5.Address = f20elemf1iter.ReadEndpoint.Address
						}
						if f20elemf1iter.ReadEndpoint.Port != nil {
							portCopy := int64(*f20elemf1iter.ReadEndpoint.Port)
							f20elemf1elemf5.Port = &portCopy
						}
						f20elemf1elem.ReadEndpoint = f20elemf1elemf5
					}
					f20elemf1 = append(f20elemf1, f20elemf1elem)
				}
				f20elem.NodeGroupMembers = f20elemf1
			}
			if f20iter.PrimaryEndpoint != nil {
				f20elemf2 := &svcapitypes.Endpoint{}
				if f20iter.PrimaryEndpoint.Address != nil {
					f20elemf2.Address = f20iter.PrimaryEndpoint.Address
				}
				if f20iter.PrimaryEndpoint.Port != nil {
					portCopy := int64(*f20iter.PrimaryEndpoint.Port)
					f20elemf2.Port = &portCopy
				}
				f20elem.PrimaryEndpoint = f20elemf2
			}
			if f20iter.ReaderEndpoint != nil {
				f20elemf3 := &svcapitypes.Endpoint{}
				if f20iter.ReaderEndpoint.Address != nil {
					f20elemf3.Address = f20iter.ReaderEndpoint.Address
				}
				if f20iter.ReaderEndpoint.Port != nil {
					portCopy := int64(*f20iter.ReaderEndpoint.Port)
					f20elemf3.Port = &portCopy
				}
				f20elem.ReaderEndpoint = f20elemf3
			}
			if f20iter.Slots != nil {
				f20elem.Slots = f20iter.Slots
			}
			if f20iter.Status != nil {
				f20elem.Status = f20iter.Status
			}
			f20 = append(f20, f20elem)
		}
		ko.Status.NodeGroups = f20
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f21 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != "" {
			f21.AuthTokenStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != "" {
			f21.AutomaticFailoverStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f21f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f21f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f21f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f21f2iter.DestinationDetails != nil {
					f21f2elemf0 := &svcapitypes.DestinationDetails{}
					if f21f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f21f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f21f2elemf0f0.LogGroup = f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f21f2elemf0.CloudWatchLogsDetails = f21f2elemf0f0
					}
					if f21f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f21f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f21f2elemf0f1.DeliveryStream = f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f21f2elemf0.KinesisFirehoseDetails = f21f2elemf0f1
					}
					f21f2elem.DestinationDetails = f21f2elemf0
				}
				if f21f2iter.DestinationType != "" {
					f21f2elem.DestinationType = aws.String(string(f21f2iter.DestinationType))
				}
				if f21f2iter.LogFormat != "" {
					f21f2elem.LogFormat = aws.String(string(f21f2iter.LogFormat))
				}
				if f21f2iter.LogType != "" {
					f21f2elem.LogType = aws.String(string(f21f2iter.LogType))
				}
				f21f2 = append(f21f2, f21f2elem)
			}
			f21.LogDeliveryConfigurations = f21f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f21.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f21f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f21f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f21f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f21f4.SlotMigration = f21f4f0
			}
			f21.Resharding = f21f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f21f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f21f5.UserGroupIDsToAdd = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd)
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f21f5.UserGroupIDsToRemove = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove)
			}
			f21.UserGroups = f21f5
		}
		ko.Status.PendingModifiedValues = f21
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		snapshotRetentionLimitCopy := int64(*resp.ReplicationGroup.SnapshotRetentionLimit)
		ko.Spec.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		ko.Spec.UserGroupIDs = aws.StringSlice(resp.ReplicationGroup.UserGroupIds)
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomModifyReplicationGroupSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyReplicationGroupInput, error) {
	res := &svcsdk.ModifyReplicationGroupInput{}

	res.ApplyImmediately = aws.Bool(true)
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.AuthToken = aws.String(tmpSecret)
		}
	}
	if r.ko.Status.AutoMinorVersionUpgrade != nil {
		res.AutoMinorVersionUpgrade = r.ko.Status.AutoMinorVersionUpgrade
	}
	if r.ko.Spec.AutomaticFailoverEnabled != nil {
		res.AutomaticFailoverEnabled = r.ko.Spec.AutomaticFailoverEnabled
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.CacheNodeType = r.ko.Spec.CacheNodeType
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.CacheParameterGroupName = r.ko.Spec.CacheParameterGroupName
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		res.CacheSecurityGroupNames = aws.ToStringSlice(r.ko.Spec.CacheSecurityGroupNames)
	}
	if r.ko.Spec.Engine != nil {
		res.Engine = r.ko.Spec.Engine
	}
	if r.ko.Spec.IPDiscovery != nil {
		res.IpDiscovery = svcsdktypes.IpDiscovery(*r.ko.Spec.IPDiscovery)
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f11 := []svcsdktypes.LogDeliveryConfigurationRequest{}
		for _, f11iter := range r.ko.Spec.LogDeliveryConfigurations {
			f11elem := &svcsdktypes.LogDeliveryConfigurationRequest{}
			if f11iter.DestinationDetails != nil {
				f11elemf0 := &svcsdktypes.DestinationDetails{}
				if f11iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f11elemf0f0 := &svcsdktypes.CloudWatchLogsDestinationDetails{}
					if f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f11elemf0f0.LogGroup = f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f11elemf0.CloudWatchLogsDetails = f11elemf0f0
				}
				if f11iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f11elemf0f1 := &svcsdktypes.KinesisFirehoseDestinationDetails{}
					if f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f11elemf0f1.DeliveryStream = f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f11elemf0.KinesisFirehoseDetails = f11elemf0f1
				}
				f11elem.DestinationDetails = f11elemf0
			}
			if f11iter.DestinationType != nil {
				f11elem.DestinationType = svcsdktypes.DestinationType(*f11iter.DestinationType)
			}
			if f11iter.Enabled != nil {
				f11elem.Enabled = f11iter.Enabled
			}
			if f11iter.LogFormat != nil {
				f11elem.LogFormat = svcsdktypes.LogFormat(*f11iter.LogFormat)
			}
			if f11iter.LogType != nil {
				f11elem.LogType = svcsdktypes.LogType(*f11iter.LogType)
			}
			f11 = append(f11, *f11elem)
		}
		res.LogDeliveryConfigurations = f11
	}
	if r.ko.Spec.MultiAZEnabled != nil {
		res.MultiAZEnabled = r.ko.Spec.MultiAZEnabled
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.NotificationTopicArn = r.ko.Spec.NotificationTopicARN
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.PreferredMaintenanceWindow = r.ko.Spec.PreferredMaintenanceWindow
	}
	if r.ko.Spec.PrimaryClusterID != nil {
		res.PrimaryClusterId = r.ko.Spec.PrimaryClusterID
	}
	if r.ko.Spec.Description != nil {
		res.ReplicationGroupDescription = r.ko.Spec.Description
	}
	if r.ko.Spec.ReplicationGroupID != nil {
		res.ReplicationGroupId = r.ko.Spec.ReplicationGroupID
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		snapshotRetentionLimitCopy0 := *r.ko.Spec.SnapshotRetentionLimit
		if snapshotRetentionLimitCopy0 > math.MaxInt32 || snapshotRetentionLimitCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field SnapshotRetentionLimit is of type int32")
		}
		snapshotRetentionLimitCopy := int32(snapshotRetentionLimitCopy0)
		res.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SnapshotWindow = r.ko.Spec.SnapshotWindow
	}
	if r.ko.Status.SnapshottingClusterID != nil {
		res.SnapshottingClusterId = r.ko.Status.SnapshottingClusterID
	}
	if r.ko.Spec.TransitEncryptionEnabled != nil {
		res.TransitEncryptionEnabled = r.ko.Spec.TransitEncryptionEnabled
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if isDeleting(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileDeleting
	}
	if isModifying(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgNoDeleteWhileModifying,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileModifying
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteReplicationGroup(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteReplicationGroup", err)
	// delete call successful
	if err == nil {
		rp, _ := rm.setReplicationGroupOutput(ctx, r, resp.ReplicationGroup)
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			rp,
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return rp, requeueWaitWhileDeleting
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteReplicationGroupInput, error) {
	res := &svcsdk.DeleteReplicationGroupInput{}

	if r.ko.Spec.ReplicationGroupID != nil {
		res.ReplicationGroupId = r.ko.Spec.ReplicationGroupID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ReplicationGroup,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameter",
		"InvalidParameterValue",
		"InvalidParameterCombination",
		"InsufficientCacheClusterCapacity",
		"ClusterQuotaForCustomerExceeded",
		"NodeQuotaForClusterExceeded",
		"NodeQuotaForCustomerExceeded",
		"InvalidVPCNetworkStateFault",
		"TagQuotaPerResourceExceeded",
		"NodeGroupsPerReplicationGroupQuotaExceeded",
		"InvalidCacheSecurityGroupState",
		"InvalidKMSKeyFault":
		return true
	default:
		return false
	}
}

// This method copies the data from given ReplicationGroup by populating it
// into copy of supplied resource and returns that.
func (rm *resourceManager) setReplicationGroupOutput(
	ctx context.Context,
	r *resource,
	obj *svcsdktypes.ReplicationGroup,
) (*resource, error) {
	if obj == nil ||
		r == nil ||
		r.ko == nil {
		return nil, nil
	}
	resp := &svcsdk.CreateReplicationGroupOutput{ReplicationGroup: obj}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != "" {
		ko.Status.AutomaticFailover = aws.String(string(resp.ReplicationGroup.AutomaticFailover))
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			portCopy := int64(*resp.ReplicationGroup.ConfigurationEndpoint.Port)
			f8.Port = &portCopy
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != "" {
		ko.Status.DataTiering = aws.String(string(resp.ReplicationGroup.DataTiering))
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.Engine != nil {
		ko.Spec.Engine = resp.ReplicationGroup.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f12 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f12.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f12.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f12
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.IpDiscovery != "" {
		ko.Spec.IPDiscovery = aws.String(string(resp.ReplicationGroup.IpDiscovery))
	} else {
		ko.Spec.IPDiscovery = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f15 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f15iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f15elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f15iter.DestinationDetails != nil {
				f15elemf0 := &svcapitypes.DestinationDetails{}
				if f15iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f15elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f15elemf0f0.LogGroup = f15iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f15elemf0.CloudWatchLogsDetails = f15elemf0f0
				}
				if f15iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f15elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f15elemf0f1.DeliveryStream = f15iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f15elemf0.KinesisFirehoseDetails = f15elemf0f1
				}
				f15elem.DestinationDetails = f15elemf0
			}
			if f15iter.DestinationType != "" {
				f15elem.DestinationType = aws.String(string(f15iter.DestinationType))
			}
			if f15iter.LogFormat != "" {
				f15elem.LogFormat = aws.String(string(f15iter.LogFormat))
			}
			if f15iter.LogType != "" {
				f15elem.LogType = aws.String(string(f15iter.LogType))
			}
			f15 = append(f15, f15elem)
		}
		ko.Spec.LogDeliveryConfigurations = f15
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		ko.Status.MemberClusters = aws.StringSlice(resp.ReplicationGroup.MemberClusters)
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		ko.Status.MemberClustersOutpostARNs = aws.StringSlice(resp.ReplicationGroup.MemberClustersOutpostArns)
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != "" {
		ko.Status.MultiAZ = aws.String(string(resp.ReplicationGroup.MultiAZ))
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NetworkType != "" {
		ko.Spec.NetworkType = aws.String(string(resp.ReplicationGroup.NetworkType))
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f20 := []*svcapitypes.NodeGroup{}
		for _, f20iter := range resp.ReplicationGroup.NodeGroups {
			f20elem := &svcapitypes.NodeGroup{}
			if f20iter.NodeGroupId != nil {
				f20elem.NodeGroupID = f20iter.NodeGroupId
			}
			if f20iter.NodeGroupMembers != nil {
				f20elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f20elemf1iter := range f20iter.NodeGroupMembers {
					f20elemf1elem := &svcapitypes.NodeGroupMember{}
					if f20elemf1iter.CacheClusterId != nil {
						f20elemf1elem.CacheClusterID = f20elemf1iter.CacheClusterId
					}
					if f20elemf1iter.CacheNodeId != nil {
						f20elemf1elem.CacheNodeID = f20elemf1iter.CacheNodeId
					}
					if f20elemf1iter.CurrentRole != nil {
						f20elemf1elem.CurrentRole = f20elemf1iter.CurrentRole
					}
					if f20elemf1iter.PreferredAvailabilityZone != nil {
						f20elemf1elem.PreferredAvailabilityZone = f20elemf1iter.PreferredAvailabilityZone
					}
					if f20elemf1iter.PreferredOutpostArn != nil {
						f20elemf1elem.PreferredOutpostARN = f20elemf1iter.PreferredOutpostArn
					}
					if f20elemf1iter.ReadEndpoint != nil {
						f20elemf1elemf5 := &svcapitypes.Endpoint{}
						if f20elemf1iter.ReadEndpoint.Address != nil {
							f20elemf1elemf5.Address = f20elemf1iter.ReadEndpoint.Address
						}
						if f20elemf1iter.ReadEndpoint.Port != nil {
							portCopy := int64(*f20elemf1iter.ReadEndpoint.Port)
							f20elemf1elemf5.Port = &portCopy
						}
						f20elemf1elem.ReadEndpoint = f20elemf1elemf5
					}
					f20elemf1 = append(f20elemf1, f20elemf1elem)
				}
				f20elem.NodeGroupMembers = f20elemf1
			}
			if f20iter.PrimaryEndpoint != nil {
				f20elemf2 := &svcapitypes.Endpoint{}
				if f20iter.PrimaryEndpoint.Address != nil {
					f20elemf2.Address = f20iter.PrimaryEndpoint.Address
				}
				if f20iter.PrimaryEndpoint.Port != nil {
					portCopy := int64(*f20iter.PrimaryEndpoint.Port)
					f20elemf2.Port = &portCopy
				}
				f20elem.PrimaryEndpoint = f20elemf2
			}
			if f20iter.ReaderEndpoint != nil {
				f20elemf3 := &svcapitypes.Endpoint{}
				if f20iter.ReaderEndpoint.Address != nil {
					f20elemf3.Address = f20iter.ReaderEndpoint.Address
				}
				if f20iter.ReaderEndpoint.Port != nil {
					portCopy := int64(*f20iter.ReaderEndpoint.Port)
					f20elemf3.Port = &portCopy
				}
				f20elem.ReaderEndpoint = f20elemf3
			}
			if f20iter.Slots != nil {
				f20elem.Slots = f20iter.Slots
			}
			if f20iter.Status != nil {
				f20elem.Status = f20iter.Status
			}
			f20 = append(f20, f20elem)
		}
		ko.Status.NodeGroups = f20
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f21 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != "" {
			f21.AuthTokenStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != "" {
			f21.AutomaticFailoverStatus = aws.String(string(resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus))
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f21f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f21f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f21f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f21f2iter.DestinationDetails != nil {
					f21f2elemf0 := &svcapitypes.DestinationDetails{}
					if f21f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f21f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f21f2elemf0f0.LogGroup = f21f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f21f2elemf0.CloudWatchLogsDetails = f21f2elemf0f0
					}
					if f21f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f21f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f21f2elemf0f1.DeliveryStream = f21f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f21f2elemf0.KinesisFirehoseDetails = f21f2elemf0f1
					}
					f21f2elem.DestinationDetails = f21f2elemf0
				}
				if f21f2iter.DestinationType != "" {
					f21f2elem.DestinationType = aws.String(string(f21f2iter.DestinationType))
				}
				if f21f2iter.LogFormat != "" {
					f21f2elem.LogFormat = aws.String(string(f21f2iter.LogFormat))
				}
				if f21f2iter.LogType != "" {
					f21f2elem.LogType = aws.String(string(f21f2iter.LogType))
				}
				f21f2 = append(f21f2, f21f2elem)
			}
			f21.LogDeliveryConfigurations = f21f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f21.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f21f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f21f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f21f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f21f4.SlotMigration = f21f4f0
			}
			f21.Resharding = f21f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f21f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f21f5.UserGroupIDsToAdd = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd)
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f21f5.UserGroupIDsToRemove = aws.StringSlice(resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove)
			}
			f21.UserGroups = f21f5
		}
		ko.Status.PendingModifiedValues = f21
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		snapshotRetentionLimitCopy := int64(*resp.ReplicationGroup.SnapshotRetentionLimit)
		ko.Spec.SnapshotRetentionLimit = &snapshotRetentionLimitCopy
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		ko.Spec.UserGroupIDs = aws.StringSlice(resp.ReplicationGroup.UserGroupIds)
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(ctx, *obj, ko) // custom set output from obj
	return &resource{ko}, nil
}
