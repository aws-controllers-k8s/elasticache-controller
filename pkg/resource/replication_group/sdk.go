// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package replication_group

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/elasticache"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elasticache-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.ElastiCache{}
	_ = &svcapitypes.ReplicationGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeReplicationGroupsOutput
	resp, err = rm.sdkapi.DescribeReplicationGroupsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeReplicationGroups", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ReplicationGroupNotFoundFault" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.ReplicationGroups {
		if elem.ARN != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ARN)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.AtRestEncryptionEnabled != nil {
			ko.Spec.AtRestEncryptionEnabled = elem.AtRestEncryptionEnabled
		} else {
			ko.Spec.AtRestEncryptionEnabled = nil
		}
		if elem.AuthTokenEnabled != nil {
			ko.Status.AuthTokenEnabled = elem.AuthTokenEnabled
		} else {
			ko.Status.AuthTokenEnabled = nil
		}
		if elem.AuthTokenLastModifiedDate != nil {
			ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*elem.AuthTokenLastModifiedDate}
		} else {
			ko.Status.AuthTokenLastModifiedDate = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			ko.Status.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			ko.Status.AutoMinorVersionUpgrade = nil
		}
		if elem.AutomaticFailover != nil {
			ko.Status.AutomaticFailover = elem.AutomaticFailover
		} else {
			ko.Status.AutomaticFailover = nil
		}
		if elem.CacheNodeType != nil {
			ko.Spec.CacheNodeType = elem.CacheNodeType
		} else {
			ko.Spec.CacheNodeType = nil
		}
		if elem.ClusterEnabled != nil {
			ko.Status.ClusterEnabled = elem.ClusterEnabled
		} else {
			ko.Status.ClusterEnabled = nil
		}
		if elem.ConfigurationEndpoint != nil {
			f8 := &svcapitypes.Endpoint{}
			if elem.ConfigurationEndpoint.Address != nil {
				f8.Address = elem.ConfigurationEndpoint.Address
			}
			if elem.ConfigurationEndpoint.Port != nil {
				f8.Port = elem.ConfigurationEndpoint.Port
			}
			ko.Status.ConfigurationEndpoint = f8
		} else {
			ko.Status.ConfigurationEndpoint = nil
		}
		if elem.DataTiering != nil {
			ko.Status.DataTiering = elem.DataTiering
		} else {
			ko.Status.DataTiering = nil
		}
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		} else {
			ko.Spec.Description = nil
		}
		if elem.GlobalReplicationGroupInfo != nil {
			f11 := &svcapitypes.GlobalReplicationGroupInfo{}
			if elem.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
				f11.GlobalReplicationGroupID = elem.GlobalReplicationGroupInfo.GlobalReplicationGroupId
			}
			if elem.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
				f11.GlobalReplicationGroupMemberRole = elem.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
			}
			ko.Status.GlobalReplicationGroupInfo = f11
		} else {
			ko.Status.GlobalReplicationGroupInfo = nil
		}
		if elem.KmsKeyId != nil {
			ko.Spec.KMSKeyID = elem.KmsKeyId
		} else {
			ko.Spec.KMSKeyID = nil
		}
		if elem.LogDeliveryConfigurations != nil {
			f13 := []*svcapitypes.LogDeliveryConfigurationRequest{}
			for _, f13iter := range elem.LogDeliveryConfigurations {
				f13elem := &svcapitypes.LogDeliveryConfigurationRequest{}
				if f13iter.DestinationDetails != nil {
					f13elemf0 := &svcapitypes.DestinationDetails{}
					if f13iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f13elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f13elemf0f0.LogGroup = f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f13elemf0.CloudWatchLogsDetails = f13elemf0f0
					}
					if f13iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f13elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f13elemf0f1.DeliveryStream = f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f13elemf0.KinesisFirehoseDetails = f13elemf0f1
					}
					f13elem.DestinationDetails = f13elemf0
				}
				if f13iter.DestinationType != nil {
					f13elem.DestinationType = f13iter.DestinationType
				}
				if f13iter.LogFormat != nil {
					f13elem.LogFormat = f13iter.LogFormat
				}
				if f13iter.LogType != nil {
					f13elem.LogType = f13iter.LogType
				}
				f13 = append(f13, f13elem)
			}
			ko.Spec.LogDeliveryConfigurations = f13
		} else {
			ko.Spec.LogDeliveryConfigurations = nil
		}
		if elem.MemberClusters != nil {
			f14 := []*string{}
			for _, f14iter := range elem.MemberClusters {
				var f14elem string
				f14elem = *f14iter
				f14 = append(f14, &f14elem)
			}
			ko.Status.MemberClusters = f14
		} else {
			ko.Status.MemberClusters = nil
		}
		if elem.MemberClustersOutpostArns != nil {
			f15 := []*string{}
			for _, f15iter := range elem.MemberClustersOutpostArns {
				var f15elem string
				f15elem = *f15iter
				f15 = append(f15, &f15elem)
			}
			ko.Status.MemberClustersOutpostARNs = f15
		} else {
			ko.Status.MemberClustersOutpostARNs = nil
		}
		if elem.MultiAZ != nil {
			ko.Status.MultiAZ = elem.MultiAZ
		} else {
			ko.Status.MultiAZ = nil
		}
		if elem.NodeGroups != nil {
			f17 := []*svcapitypes.NodeGroup{}
			for _, f17iter := range elem.NodeGroups {
				f17elem := &svcapitypes.NodeGroup{}
				if f17iter.NodeGroupId != nil {
					f17elem.NodeGroupID = f17iter.NodeGroupId
				}
				if f17iter.NodeGroupMembers != nil {
					f17elemf1 := []*svcapitypes.NodeGroupMember{}
					for _, f17elemf1iter := range f17iter.NodeGroupMembers {
						f17elemf1elem := &svcapitypes.NodeGroupMember{}
						if f17elemf1iter.CacheClusterId != nil {
							f17elemf1elem.CacheClusterID = f17elemf1iter.CacheClusterId
						}
						if f17elemf1iter.CacheNodeId != nil {
							f17elemf1elem.CacheNodeID = f17elemf1iter.CacheNodeId
						}
						if f17elemf1iter.CurrentRole != nil {
							f17elemf1elem.CurrentRole = f17elemf1iter.CurrentRole
						}
						if f17elemf1iter.PreferredAvailabilityZone != nil {
							f17elemf1elem.PreferredAvailabilityZone = f17elemf1iter.PreferredAvailabilityZone
						}
						if f17elemf1iter.PreferredOutpostArn != nil {
							f17elemf1elem.PreferredOutpostARN = f17elemf1iter.PreferredOutpostArn
						}
						if f17elemf1iter.ReadEndpoint != nil {
							f17elemf1elemf5 := &svcapitypes.Endpoint{}
							if f17elemf1iter.ReadEndpoint.Address != nil {
								f17elemf1elemf5.Address = f17elemf1iter.ReadEndpoint.Address
							}
							if f17elemf1iter.ReadEndpoint.Port != nil {
								f17elemf1elemf5.Port = f17elemf1iter.ReadEndpoint.Port
							}
							f17elemf1elem.ReadEndpoint = f17elemf1elemf5
						}
						f17elemf1 = append(f17elemf1, f17elemf1elem)
					}
					f17elem.NodeGroupMembers = f17elemf1
				}
				if f17iter.PrimaryEndpoint != nil {
					f17elemf2 := &svcapitypes.Endpoint{}
					if f17iter.PrimaryEndpoint.Address != nil {
						f17elemf2.Address = f17iter.PrimaryEndpoint.Address
					}
					if f17iter.PrimaryEndpoint.Port != nil {
						f17elemf2.Port = f17iter.PrimaryEndpoint.Port
					}
					f17elem.PrimaryEndpoint = f17elemf2
				}
				if f17iter.ReaderEndpoint != nil {
					f17elemf3 := &svcapitypes.Endpoint{}
					if f17iter.ReaderEndpoint.Address != nil {
						f17elemf3.Address = f17iter.ReaderEndpoint.Address
					}
					if f17iter.ReaderEndpoint.Port != nil {
						f17elemf3.Port = f17iter.ReaderEndpoint.Port
					}
					f17elem.ReaderEndpoint = f17elemf3
				}
				if f17iter.Slots != nil {
					f17elem.Slots = f17iter.Slots
				}
				if f17iter.Status != nil {
					f17elem.Status = f17iter.Status
				}
				f17 = append(f17, f17elem)
			}
			ko.Status.NodeGroups = f17
		} else {
			ko.Status.NodeGroups = nil
		}
		if elem.PendingModifiedValues != nil {
			f18 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
			if elem.PendingModifiedValues.AuthTokenStatus != nil {
				f18.AuthTokenStatus = elem.PendingModifiedValues.AuthTokenStatus
			}
			if elem.PendingModifiedValues.AutomaticFailoverStatus != nil {
				f18.AutomaticFailoverStatus = elem.PendingModifiedValues.AutomaticFailoverStatus
			}
			if elem.PendingModifiedValues.LogDeliveryConfigurations != nil {
				f18f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
				for _, f18f2iter := range elem.PendingModifiedValues.LogDeliveryConfigurations {
					f18f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
					if f18f2iter.DestinationDetails != nil {
						f18f2elemf0 := &svcapitypes.DestinationDetails{}
						if f18f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
							f18f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
							if f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
								f18f2elemf0f0.LogGroup = f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
							}
							f18f2elemf0.CloudWatchLogsDetails = f18f2elemf0f0
						}
						if f18f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
							f18f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
							if f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
								f18f2elemf0f1.DeliveryStream = f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
							}
							f18f2elemf0.KinesisFirehoseDetails = f18f2elemf0f1
						}
						f18f2elem.DestinationDetails = f18f2elemf0
					}
					if f18f2iter.DestinationType != nil {
						f18f2elem.DestinationType = f18f2iter.DestinationType
					}
					if f18f2iter.LogFormat != nil {
						f18f2elem.LogFormat = f18f2iter.LogFormat
					}
					if f18f2iter.LogType != nil {
						f18f2elem.LogType = f18f2iter.LogType
					}
					f18f2 = append(f18f2, f18f2elem)
				}
				f18.LogDeliveryConfigurations = f18f2
			}
			if elem.PendingModifiedValues.PrimaryClusterId != nil {
				f18.PrimaryClusterID = elem.PendingModifiedValues.PrimaryClusterId
			}
			if elem.PendingModifiedValues.Resharding != nil {
				f18f4 := &svcapitypes.ReshardingStatus{}
				if elem.PendingModifiedValues.Resharding.SlotMigration != nil {
					f18f4f0 := &svcapitypes.SlotMigration{}
					if elem.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
						f18f4f0.ProgressPercentage = elem.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
					}
					f18f4.SlotMigration = f18f4f0
				}
				f18.Resharding = f18f4
			}
			if elem.PendingModifiedValues.UserGroups != nil {
				f18f5 := &svcapitypes.UserGroupsUpdateStatus{}
				if elem.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
					f18f5f0 := []*string{}
					for _, f18f5f0iter := range elem.PendingModifiedValues.UserGroups.UserGroupIdsToAdd {
						var f18f5f0elem string
						f18f5f0elem = *f18f5f0iter
						f18f5f0 = append(f18f5f0, &f18f5f0elem)
					}
					f18f5.UserGroupIDsToAdd = f18f5f0
				}
				if elem.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
					f18f5f1 := []*string{}
					for _, f18f5f1iter := range elem.PendingModifiedValues.UserGroups.UserGroupIdsToRemove {
						var f18f5f1elem string
						f18f5f1elem = *f18f5f1iter
						f18f5f1 = append(f18f5f1, &f18f5f1elem)
					}
					f18f5.UserGroupIDsToRemove = f18f5f1
				}
				f18.UserGroups = f18f5
			}
			ko.Status.PendingModifiedValues = f18
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.ReplicationGroupCreateTime != nil {
			ko.Status.ReplicationGroupCreateTime = &metav1.Time{*elem.ReplicationGroupCreateTime}
		} else {
			ko.Status.ReplicationGroupCreateTime = nil
		}
		if elem.ReplicationGroupId != nil {
			ko.Spec.ReplicationGroupID = elem.ReplicationGroupId
		} else {
			ko.Spec.ReplicationGroupID = nil
		}
		if elem.SnapshotRetentionLimit != nil {
			ko.Spec.SnapshotRetentionLimit = elem.SnapshotRetentionLimit
		} else {
			ko.Spec.SnapshotRetentionLimit = nil
		}
		if elem.SnapshotWindow != nil {
			ko.Spec.SnapshotWindow = elem.SnapshotWindow
		} else {
			ko.Spec.SnapshotWindow = nil
		}
		if elem.SnapshottingClusterId != nil {
			ko.Status.SnapshottingClusterID = elem.SnapshottingClusterId
		} else {
			ko.Status.SnapshottingClusterID = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.TransitEncryptionEnabled != nil {
			ko.Spec.TransitEncryptionEnabled = elem.TransitEncryptionEnabled
		} else {
			ko.Spec.TransitEncryptionEnabled = nil
		}
		if elem.UserGroupIds != nil {
			f26 := []*string{}
			for _, f26iter := range elem.UserGroupIds {
				var f26elem string
				f26elem = *f26iter
				f26 = append(f26, &f26elem)
			}
			ko.Spec.UserGroupIDs = f26
		} else {
			ko.Spec.UserGroupIDs = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomDescribeReplicationGroupsSetOutput(ctx, r, resp, ko)
	if err != nil {
		return nil, err
	}

	rm.updateSpecFields(ctx, resp.ReplicationGroups[0], &resource{ko})
	if isDeleting(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		return &resource{ko}, nil
	}
	if isModifying(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgNoDeleteWhileModifying,
			nil,
		)
		return &resource{ko}, nil
	}

	if isCreating(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(
			&resource{ko},
			corev1.ConditionFalse,
			&condMsgCurrentlyCreating,
			nil,
		)
		return &resource{ko}, nil
	}

	if isCreateFailed(r) {
		// This is a terminal state and by setting a Terminal condition on the
		// resource, we will prevent it from being requeued.
		ackcondition.SetTerminal(
			&resource{ko},
			corev1.ConditionTrue,
			&condMsgTerminalCreateFailed,
			nil,
		)
		return &resource{ko}, nil
	}

	if ko.Status.ACKResourceMetadata != nil && ko.Status.ACKResourceMetadata.ARN != nil {
		resourceARN := (*string)(ko.Status.ACKResourceMetadata.ARN)
		tags, err := rm.getTags(ctx, *resourceARN)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Spec.ReplicationGroupID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeReplicationGroupsInput, error) {
	res := &svcsdk.DescribeReplicationGroupsInput{}

	if r.ko.Spec.ReplicationGroupID != nil {
		res.SetReplicationGroupId(*r.ko.Spec.ReplicationGroupID)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.CreateReplicationGroupWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != nil {
		ko.Status.AutomaticFailover = resp.ReplicationGroup.AutomaticFailover
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			f8.Port = resp.ReplicationGroup.ConfigurationEndpoint.Port
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != nil {
		ko.Status.DataTiering = resp.ReplicationGroup.DataTiering
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f11 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f11.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f11.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f11
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f13 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f13iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f13elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f13iter.DestinationDetails != nil {
				f13elemf0 := &svcapitypes.DestinationDetails{}
				if f13iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f13elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f13elemf0f0.LogGroup = f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f13elemf0.CloudWatchLogsDetails = f13elemf0f0
				}
				if f13iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f13elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f13elemf0f1.DeliveryStream = f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f13elemf0.KinesisFirehoseDetails = f13elemf0f1
				}
				f13elem.DestinationDetails = f13elemf0
			}
			if f13iter.DestinationType != nil {
				f13elem.DestinationType = f13iter.DestinationType
			}
			if f13iter.LogFormat != nil {
				f13elem.LogFormat = f13iter.LogFormat
			}
			if f13iter.LogType != nil {
				f13elem.LogType = f13iter.LogType
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LogDeliveryConfigurations = f13
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		f14 := []*string{}
		for _, f14iter := range resp.ReplicationGroup.MemberClusters {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		ko.Status.MemberClusters = f14
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		f15 := []*string{}
		for _, f15iter := range resp.ReplicationGroup.MemberClustersOutpostArns {
			var f15elem string
			f15elem = *f15iter
			f15 = append(f15, &f15elem)
		}
		ko.Status.MemberClustersOutpostARNs = f15
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != nil {
		ko.Status.MultiAZ = resp.ReplicationGroup.MultiAZ
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f17 := []*svcapitypes.NodeGroup{}
		for _, f17iter := range resp.ReplicationGroup.NodeGroups {
			f17elem := &svcapitypes.NodeGroup{}
			if f17iter.NodeGroupId != nil {
				f17elem.NodeGroupID = f17iter.NodeGroupId
			}
			if f17iter.NodeGroupMembers != nil {
				f17elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f17elemf1iter := range f17iter.NodeGroupMembers {
					f17elemf1elem := &svcapitypes.NodeGroupMember{}
					if f17elemf1iter.CacheClusterId != nil {
						f17elemf1elem.CacheClusterID = f17elemf1iter.CacheClusterId
					}
					if f17elemf1iter.CacheNodeId != nil {
						f17elemf1elem.CacheNodeID = f17elemf1iter.CacheNodeId
					}
					if f17elemf1iter.CurrentRole != nil {
						f17elemf1elem.CurrentRole = f17elemf1iter.CurrentRole
					}
					if f17elemf1iter.PreferredAvailabilityZone != nil {
						f17elemf1elem.PreferredAvailabilityZone = f17elemf1iter.PreferredAvailabilityZone
					}
					if f17elemf1iter.PreferredOutpostArn != nil {
						f17elemf1elem.PreferredOutpostARN = f17elemf1iter.PreferredOutpostArn
					}
					if f17elemf1iter.ReadEndpoint != nil {
						f17elemf1elemf5 := &svcapitypes.Endpoint{}
						if f17elemf1iter.ReadEndpoint.Address != nil {
							f17elemf1elemf5.Address = f17elemf1iter.ReadEndpoint.Address
						}
						if f17elemf1iter.ReadEndpoint.Port != nil {
							f17elemf1elemf5.Port = f17elemf1iter.ReadEndpoint.Port
						}
						f17elemf1elem.ReadEndpoint = f17elemf1elemf5
					}
					f17elemf1 = append(f17elemf1, f17elemf1elem)
				}
				f17elem.NodeGroupMembers = f17elemf1
			}
			if f17iter.PrimaryEndpoint != nil {
				f17elemf2 := &svcapitypes.Endpoint{}
				if f17iter.PrimaryEndpoint.Address != nil {
					f17elemf2.Address = f17iter.PrimaryEndpoint.Address
				}
				if f17iter.PrimaryEndpoint.Port != nil {
					f17elemf2.Port = f17iter.PrimaryEndpoint.Port
				}
				f17elem.PrimaryEndpoint = f17elemf2
			}
			if f17iter.ReaderEndpoint != nil {
				f17elemf3 := &svcapitypes.Endpoint{}
				if f17iter.ReaderEndpoint.Address != nil {
					f17elemf3.Address = f17iter.ReaderEndpoint.Address
				}
				if f17iter.ReaderEndpoint.Port != nil {
					f17elemf3.Port = f17iter.ReaderEndpoint.Port
				}
				f17elem.ReaderEndpoint = f17elemf3
			}
			if f17iter.Slots != nil {
				f17elem.Slots = f17iter.Slots
			}
			if f17iter.Status != nil {
				f17elem.Status = f17iter.Status
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.NodeGroups = f17
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f18 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != nil {
			f18.AuthTokenStatus = resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != nil {
			f18.AutomaticFailoverStatus = resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f18f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f18f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f18f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f18f2iter.DestinationDetails != nil {
					f18f2elemf0 := &svcapitypes.DestinationDetails{}
					if f18f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f18f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f18f2elemf0f0.LogGroup = f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f18f2elemf0.CloudWatchLogsDetails = f18f2elemf0f0
					}
					if f18f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f18f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f18f2elemf0f1.DeliveryStream = f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f18f2elemf0.KinesisFirehoseDetails = f18f2elemf0f1
					}
					f18f2elem.DestinationDetails = f18f2elemf0
				}
				if f18f2iter.DestinationType != nil {
					f18f2elem.DestinationType = f18f2iter.DestinationType
				}
				if f18f2iter.LogFormat != nil {
					f18f2elem.LogFormat = f18f2iter.LogFormat
				}
				if f18f2iter.LogType != nil {
					f18f2elem.LogType = f18f2iter.LogType
				}
				f18f2 = append(f18f2, f18f2elem)
			}
			f18.LogDeliveryConfigurations = f18f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f18.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f18f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f18f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f18f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f18f4.SlotMigration = f18f4f0
			}
			f18.Resharding = f18f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f18f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f18f5f0 := []*string{}
				for _, f18f5f0iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd {
					var f18f5f0elem string
					f18f5f0elem = *f18f5f0iter
					f18f5f0 = append(f18f5f0, &f18f5f0elem)
				}
				f18f5.UserGroupIDsToAdd = f18f5f0
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f18f5f1 := []*string{}
				for _, f18f5f1iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove {
					var f18f5f1elem string
					f18f5f1elem = *f18f5f1iter
					f18f5f1 = append(f18f5f1, &f18f5f1elem)
				}
				f18f5.UserGroupIDsToRemove = f18f5f1
			}
			f18.UserGroups = f18f5
		}
		ko.Status.PendingModifiedValues = f18
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		ko.Spec.SnapshotRetentionLimit = resp.ReplicationGroup.SnapshotRetentionLimit
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		f26 := []*string{}
		for _, f26iter := range resp.ReplicationGroup.UserGroupIds {
			var f26elem string
			f26elem = *f26iter
			f26 = append(f26, &f26elem)
		}
		ko.Spec.UserGroupIDs = f26
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomCreateReplicationGroupSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateReplicationGroupInput, error) {
	res := &svcsdk.CreateReplicationGroupInput{}

	if r.ko.Spec.AtRestEncryptionEnabled != nil {
		res.SetAtRestEncryptionEnabled(*r.ko.Spec.AtRestEncryptionEnabled)
	}
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetAuthToken(tmpSecret)
		}
	}
	if r.ko.Spec.AutomaticFailoverEnabled != nil {
		res.SetAutomaticFailoverEnabled(*r.ko.Spec.AutomaticFailoverEnabled)
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.SetCacheNodeType(*r.ko.Spec.CacheNodeType)
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.SetCacheParameterGroupName(*r.ko.Spec.CacheParameterGroupName)
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		f5 := []*string{}
		for _, f5iter := range r.ko.Spec.CacheSecurityGroupNames {
			var f5elem string
			f5elem = *f5iter
			f5 = append(f5, &f5elem)
		}
		res.SetCacheSecurityGroupNames(f5)
	}
	if r.ko.Spec.CacheSubnetGroupName != nil {
		res.SetCacheSubnetGroupName(*r.ko.Spec.CacheSubnetGroupName)
	}
	if r.ko.Spec.DataTieringEnabled != nil {
		res.SetDataTieringEnabled(*r.ko.Spec.DataTieringEnabled)
	}
	if r.ko.Spec.Engine != nil {
		res.SetEngine(*r.ko.Spec.Engine)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f11 := []*svcsdk.LogDeliveryConfigurationRequest{}
		for _, f11iter := range r.ko.Spec.LogDeliveryConfigurations {
			f11elem := &svcsdk.LogDeliveryConfigurationRequest{}
			if f11iter.DestinationDetails != nil {
				f11elemf0 := &svcsdk.DestinationDetails{}
				if f11iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f11elemf0f0 := &svcsdk.CloudWatchLogsDestinationDetails{}
					if f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f11elemf0f0.SetLogGroup(*f11iter.DestinationDetails.CloudWatchLogsDetails.LogGroup)
					}
					f11elemf0.SetCloudWatchLogsDetails(f11elemf0f0)
				}
				if f11iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f11elemf0f1 := &svcsdk.KinesisFirehoseDestinationDetails{}
					if f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f11elemf0f1.SetDeliveryStream(*f11iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream)
					}
					f11elemf0.SetKinesisFirehoseDetails(f11elemf0f1)
				}
				f11elem.SetDestinationDetails(f11elemf0)
			}
			if f11iter.DestinationType != nil {
				f11elem.SetDestinationType(*f11iter.DestinationType)
			}
			if f11iter.Enabled != nil {
				f11elem.SetEnabled(*f11iter.Enabled)
			}
			if f11iter.LogFormat != nil {
				f11elem.SetLogFormat(*f11iter.LogFormat)
			}
			if f11iter.LogType != nil {
				f11elem.SetLogType(*f11iter.LogType)
			}
			f11 = append(f11, f11elem)
		}
		res.SetLogDeliveryConfigurations(f11)
	}
	if r.ko.Spec.MultiAZEnabled != nil {
		res.SetMultiAZEnabled(*r.ko.Spec.MultiAZEnabled)
	}
	if r.ko.Spec.NodeGroupConfiguration != nil {
		f13 := []*svcsdk.NodeGroupConfiguration{}
		for _, f13iter := range r.ko.Spec.NodeGroupConfiguration {
			f13elem := &svcsdk.NodeGroupConfiguration{}
			if f13iter.NodeGroupID != nil {
				f13elem.SetNodeGroupId(*f13iter.NodeGroupID)
			}
			if f13iter.PrimaryAvailabilityZone != nil {
				f13elem.SetPrimaryAvailabilityZone(*f13iter.PrimaryAvailabilityZone)
			}
			if f13iter.PrimaryOutpostARN != nil {
				f13elem.SetPrimaryOutpostArn(*f13iter.PrimaryOutpostARN)
			}
			if f13iter.ReplicaAvailabilityZones != nil {
				f13elemf3 := []*string{}
				for _, f13elemf3iter := range f13iter.ReplicaAvailabilityZones {
					var f13elemf3elem string
					f13elemf3elem = *f13elemf3iter
					f13elemf3 = append(f13elemf3, &f13elemf3elem)
				}
				f13elem.SetReplicaAvailabilityZones(f13elemf3)
			}
			if f13iter.ReplicaCount != nil {
				f13elem.SetReplicaCount(*f13iter.ReplicaCount)
			}
			if f13iter.ReplicaOutpostARNs != nil {
				f13elemf5 := []*string{}
				for _, f13elemf5iter := range f13iter.ReplicaOutpostARNs {
					var f13elemf5elem string
					f13elemf5elem = *f13elemf5iter
					f13elemf5 = append(f13elemf5, &f13elemf5elem)
				}
				f13elem.SetReplicaOutpostArns(f13elemf5)
			}
			if f13iter.Slots != nil {
				f13elem.SetSlots(*f13iter.Slots)
			}
			f13 = append(f13, f13elem)
		}
		res.SetNodeGroupConfiguration(f13)
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*r.ko.Spec.NotificationTopicARN)
	}
	if r.ko.Spec.NumNodeGroups != nil {
		res.SetNumNodeGroups(*r.ko.Spec.NumNodeGroups)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.PreferredCacheClusterAZs != nil {
		f17 := []*string{}
		for _, f17iter := range r.ko.Spec.PreferredCacheClusterAZs {
			var f17elem string
			f17elem = *f17iter
			f17 = append(f17, &f17elem)
		}
		res.SetPreferredCacheClusterAZs(f17)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.PrimaryClusterID != nil {
		res.SetPrimaryClusterId(*r.ko.Spec.PrimaryClusterID)
	}
	if r.ko.Spec.ReplicasPerNodeGroup != nil {
		res.SetReplicasPerNodeGroup(*r.ko.Spec.ReplicasPerNodeGroup)
	}
	if r.ko.Spec.Description != nil {
		res.SetReplicationGroupDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.ReplicationGroupID != nil {
		res.SetReplicationGroupId(*r.ko.Spec.ReplicationGroupID)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f23 := []*string{}
		for _, f23iter := range r.ko.Spec.SecurityGroupIDs {
			var f23elem string
			f23elem = *f23iter
			f23 = append(f23, &f23elem)
		}
		res.SetSecurityGroupIds(f23)
	}
	if r.ko.Spec.SnapshotARNs != nil {
		f24 := []*string{}
		for _, f24iter := range r.ko.Spec.SnapshotARNs {
			var f24elem string
			f24elem = *f24iter
			f24 = append(f24, &f24elem)
		}
		res.SetSnapshotArns(f24)
	}
	if r.ko.Spec.SnapshotName != nil {
		res.SetSnapshotName(*r.ko.Spec.SnapshotName)
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*r.ko.Spec.SnapshotRetentionLimit)
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SetSnapshotWindow(*r.ko.Spec.SnapshotWindow)
	}
	if r.ko.Spec.Tags != nil {
		f28 := []*svcsdk.Tag{}
		for _, f28iter := range r.ko.Spec.Tags {
			f28elem := &svcsdk.Tag{}
			if f28iter.Key != nil {
				f28elem.SetKey(*f28iter.Key)
			}
			if f28iter.Value != nil {
				f28elem.SetValue(*f28iter.Value)
			}
			f28 = append(f28, f28elem)
		}
		res.SetTags(f28)
	}
	if r.ko.Spec.TransitEncryptionEnabled != nil {
		res.SetTransitEncryptionEnabled(*r.ko.Spec.TransitEncryptionEnabled)
	}
	if r.ko.Spec.UserGroupIDs != nil {
		f30 := []*string{}
		for _, f30iter := range r.ko.Spec.UserGroupIDs {
			var f30elem string
			f30elem = *f30iter
			f30 = append(f30, &f30elem)
		}
		res.SetUserGroupIds(f30)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	}

	updated, err = rm.CustomModifyReplicationGroup(ctx, desired, latest, delta)
	if updated != nil || err != nil {
		return updated, err
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if !delta.DifferentAt("Spec.LogDeliveryConfigurations") {
		input.SetLogDeliveryConfigurations(nil)
	}
	if delta.DifferentAt("UserGroupIDs") {
		for _, diff := range delta.Differences {
			if diff.Path.Contains("UserGroupIDs") {
				existingUserGroups := diff.B.([]*string)
				requiredUserGroups := diff.A.([]*string)

				// User groups to add
				{
					var userGroupsToAdd []*string

					for _, requiredUserGroup := range requiredUserGroups {
						found := false
						for _, existingUserGroup := range existingUserGroups {
							if requiredUserGroup == existingUserGroup {
								found = true
								break
							}
						}

						if !found {
							userGroupsToAdd = append(userGroupsToAdd, requiredUserGroup)
						}
					}

					input.SetUserGroupIdsToAdd(userGroupsToAdd)
				}

				// User groups to remove
				{
					var userGroupsToRemove []*string

					for _, existingUserGroup := range existingUserGroups {
						found := false
						for _, requiredUserGroup := range requiredUserGroups {
							if requiredUserGroup == existingUserGroup {
								found = true
								break
							}
						}

						if !found {
							userGroupsToRemove = append(userGroupsToRemove, existingUserGroup)
						}
					}

					input.SetUserGroupIdsToRemove(userGroupsToRemove)
				}
			}
		}
	}

	var resp *svcsdk.ModifyReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyReplicationGroupWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyReplicationGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != nil {
		ko.Status.AutomaticFailover = resp.ReplicationGroup.AutomaticFailover
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			f8.Port = resp.ReplicationGroup.ConfigurationEndpoint.Port
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != nil {
		ko.Status.DataTiering = resp.ReplicationGroup.DataTiering
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f11 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f11.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f11.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f11
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f13 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f13iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f13elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f13iter.DestinationDetails != nil {
				f13elemf0 := &svcapitypes.DestinationDetails{}
				if f13iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f13elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f13elemf0f0.LogGroup = f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f13elemf0.CloudWatchLogsDetails = f13elemf0f0
				}
				if f13iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f13elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f13elemf0f1.DeliveryStream = f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f13elemf0.KinesisFirehoseDetails = f13elemf0f1
				}
				f13elem.DestinationDetails = f13elemf0
			}
			if f13iter.DestinationType != nil {
				f13elem.DestinationType = f13iter.DestinationType
			}
			if f13iter.LogFormat != nil {
				f13elem.LogFormat = f13iter.LogFormat
			}
			if f13iter.LogType != nil {
				f13elem.LogType = f13iter.LogType
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LogDeliveryConfigurations = f13
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		f14 := []*string{}
		for _, f14iter := range resp.ReplicationGroup.MemberClusters {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		ko.Status.MemberClusters = f14
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		f15 := []*string{}
		for _, f15iter := range resp.ReplicationGroup.MemberClustersOutpostArns {
			var f15elem string
			f15elem = *f15iter
			f15 = append(f15, &f15elem)
		}
		ko.Status.MemberClustersOutpostARNs = f15
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != nil {
		ko.Status.MultiAZ = resp.ReplicationGroup.MultiAZ
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f17 := []*svcapitypes.NodeGroup{}
		for _, f17iter := range resp.ReplicationGroup.NodeGroups {
			f17elem := &svcapitypes.NodeGroup{}
			if f17iter.NodeGroupId != nil {
				f17elem.NodeGroupID = f17iter.NodeGroupId
			}
			if f17iter.NodeGroupMembers != nil {
				f17elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f17elemf1iter := range f17iter.NodeGroupMembers {
					f17elemf1elem := &svcapitypes.NodeGroupMember{}
					if f17elemf1iter.CacheClusterId != nil {
						f17elemf1elem.CacheClusterID = f17elemf1iter.CacheClusterId
					}
					if f17elemf1iter.CacheNodeId != nil {
						f17elemf1elem.CacheNodeID = f17elemf1iter.CacheNodeId
					}
					if f17elemf1iter.CurrentRole != nil {
						f17elemf1elem.CurrentRole = f17elemf1iter.CurrentRole
					}
					if f17elemf1iter.PreferredAvailabilityZone != nil {
						f17elemf1elem.PreferredAvailabilityZone = f17elemf1iter.PreferredAvailabilityZone
					}
					if f17elemf1iter.PreferredOutpostArn != nil {
						f17elemf1elem.PreferredOutpostARN = f17elemf1iter.PreferredOutpostArn
					}
					if f17elemf1iter.ReadEndpoint != nil {
						f17elemf1elemf5 := &svcapitypes.Endpoint{}
						if f17elemf1iter.ReadEndpoint.Address != nil {
							f17elemf1elemf5.Address = f17elemf1iter.ReadEndpoint.Address
						}
						if f17elemf1iter.ReadEndpoint.Port != nil {
							f17elemf1elemf5.Port = f17elemf1iter.ReadEndpoint.Port
						}
						f17elemf1elem.ReadEndpoint = f17elemf1elemf5
					}
					f17elemf1 = append(f17elemf1, f17elemf1elem)
				}
				f17elem.NodeGroupMembers = f17elemf1
			}
			if f17iter.PrimaryEndpoint != nil {
				f17elemf2 := &svcapitypes.Endpoint{}
				if f17iter.PrimaryEndpoint.Address != nil {
					f17elemf2.Address = f17iter.PrimaryEndpoint.Address
				}
				if f17iter.PrimaryEndpoint.Port != nil {
					f17elemf2.Port = f17iter.PrimaryEndpoint.Port
				}
				f17elem.PrimaryEndpoint = f17elemf2
			}
			if f17iter.ReaderEndpoint != nil {
				f17elemf3 := &svcapitypes.Endpoint{}
				if f17iter.ReaderEndpoint.Address != nil {
					f17elemf3.Address = f17iter.ReaderEndpoint.Address
				}
				if f17iter.ReaderEndpoint.Port != nil {
					f17elemf3.Port = f17iter.ReaderEndpoint.Port
				}
				f17elem.ReaderEndpoint = f17elemf3
			}
			if f17iter.Slots != nil {
				f17elem.Slots = f17iter.Slots
			}
			if f17iter.Status != nil {
				f17elem.Status = f17iter.Status
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.NodeGroups = f17
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f18 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != nil {
			f18.AuthTokenStatus = resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != nil {
			f18.AutomaticFailoverStatus = resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f18f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f18f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f18f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f18f2iter.DestinationDetails != nil {
					f18f2elemf0 := &svcapitypes.DestinationDetails{}
					if f18f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f18f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f18f2elemf0f0.LogGroup = f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f18f2elemf0.CloudWatchLogsDetails = f18f2elemf0f0
					}
					if f18f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f18f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f18f2elemf0f1.DeliveryStream = f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f18f2elemf0.KinesisFirehoseDetails = f18f2elemf0f1
					}
					f18f2elem.DestinationDetails = f18f2elemf0
				}
				if f18f2iter.DestinationType != nil {
					f18f2elem.DestinationType = f18f2iter.DestinationType
				}
				if f18f2iter.LogFormat != nil {
					f18f2elem.LogFormat = f18f2iter.LogFormat
				}
				if f18f2iter.LogType != nil {
					f18f2elem.LogType = f18f2iter.LogType
				}
				f18f2 = append(f18f2, f18f2elem)
			}
			f18.LogDeliveryConfigurations = f18f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f18.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f18f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f18f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f18f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f18f4.SlotMigration = f18f4f0
			}
			f18.Resharding = f18f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f18f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f18f5f0 := []*string{}
				for _, f18f5f0iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd {
					var f18f5f0elem string
					f18f5f0elem = *f18f5f0iter
					f18f5f0 = append(f18f5f0, &f18f5f0elem)
				}
				f18f5.UserGroupIDsToAdd = f18f5f0
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f18f5f1 := []*string{}
				for _, f18f5f1iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove {
					var f18f5f1elem string
					f18f5f1elem = *f18f5f1iter
					f18f5f1 = append(f18f5f1, &f18f5f1elem)
				}
				f18f5.UserGroupIDsToRemove = f18f5f1
			}
			f18.UserGroups = f18f5
		}
		ko.Status.PendingModifiedValues = f18
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		ko.Spec.SnapshotRetentionLimit = resp.ReplicationGroup.SnapshotRetentionLimit
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		f26 := []*string{}
		for _, f26iter := range resp.ReplicationGroup.UserGroupIds {
			var f26elem string
			f26elem = *f26iter
			f26 = append(f26, &f26elem)
		}
		ko.Spec.UserGroupIDs = f26
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	// custom set output from response
	ko, err = rm.CustomModifyReplicationGroupSetOutput(ctx, desired, resp, ko)
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyReplicationGroupInput, error) {
	res := &svcsdk.ModifyReplicationGroupInput{}

	res.SetApplyImmediately(true)
	if r.ko.Spec.AuthToken != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.AuthToken)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetAuthToken(tmpSecret)
		}
	}
	if r.ko.Status.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Status.AutoMinorVersionUpgrade)
	}
	if r.ko.Spec.AutomaticFailoverEnabled != nil {
		res.SetAutomaticFailoverEnabled(*r.ko.Spec.AutomaticFailoverEnabled)
	}
	if r.ko.Spec.CacheNodeType != nil {
		res.SetCacheNodeType(*r.ko.Spec.CacheNodeType)
	}
	if r.ko.Spec.CacheParameterGroupName != nil {
		res.SetCacheParameterGroupName(*r.ko.Spec.CacheParameterGroupName)
	}
	if r.ko.Spec.CacheSecurityGroupNames != nil {
		f7 := []*string{}
		for _, f7iter := range r.ko.Spec.CacheSecurityGroupNames {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		res.SetCacheSecurityGroupNames(f7)
	}
	if r.ko.Spec.LogDeliveryConfigurations != nil {
		f8 := []*svcsdk.LogDeliveryConfigurationRequest{}
		for _, f8iter := range r.ko.Spec.LogDeliveryConfigurations {
			f8elem := &svcsdk.LogDeliveryConfigurationRequest{}
			if f8iter.DestinationDetails != nil {
				f8elemf0 := &svcsdk.DestinationDetails{}
				if f8iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f8elemf0f0 := &svcsdk.CloudWatchLogsDestinationDetails{}
					if f8iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f8elemf0f0.SetLogGroup(*f8iter.DestinationDetails.CloudWatchLogsDetails.LogGroup)
					}
					f8elemf0.SetCloudWatchLogsDetails(f8elemf0f0)
				}
				if f8iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f8elemf0f1 := &svcsdk.KinesisFirehoseDestinationDetails{}
					if f8iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f8elemf0f1.SetDeliveryStream(*f8iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream)
					}
					f8elemf0.SetKinesisFirehoseDetails(f8elemf0f1)
				}
				f8elem.SetDestinationDetails(f8elemf0)
			}
			if f8iter.DestinationType != nil {
				f8elem.SetDestinationType(*f8iter.DestinationType)
			}
			if f8iter.Enabled != nil {
				f8elem.SetEnabled(*f8iter.Enabled)
			}
			if f8iter.LogFormat != nil {
				f8elem.SetLogFormat(*f8iter.LogFormat)
			}
			if f8iter.LogType != nil {
				f8elem.SetLogType(*f8iter.LogType)
			}
			f8 = append(f8, f8elem)
		}
		res.SetLogDeliveryConfigurations(f8)
	}
	if r.ko.Spec.MultiAZEnabled != nil {
		res.SetMultiAZEnabled(*r.ko.Spec.MultiAZEnabled)
	}
	if r.ko.Spec.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*r.ko.Spec.NotificationTopicARN)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.PrimaryClusterID != nil {
		res.SetPrimaryClusterId(*r.ko.Spec.PrimaryClusterID)
	}
	if r.ko.Spec.Description != nil {
		res.SetReplicationGroupDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.ReplicationGroupID != nil {
		res.SetReplicationGroupId(*r.ko.Spec.ReplicationGroupID)
	}
	if r.ko.Spec.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*r.ko.Spec.SnapshotRetentionLimit)
	}
	if r.ko.Spec.SnapshotWindow != nil {
		res.SetSnapshotWindow(*r.ko.Spec.SnapshotWindow)
	}
	if r.ko.Status.SnapshottingClusterID != nil {
		res.SetSnapshottingClusterId(*r.ko.Status.SnapshottingClusterID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if isDeleting(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileDeleting
	}
	if isModifying(r) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			r,
			corev1.ConditionFalse,
			&condMsgNoDeleteWhileModifying,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return r, requeueWaitWhileModifying
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteReplicationGroupOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteReplicationGroupWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteReplicationGroup", err)
	// delete call successful
	if err == nil {
		rp, _ := rm.setReplicationGroupOutput(r, resp.ReplicationGroup)
		// Setting resource synced condition to false will trigger a requeue of
		// the resource.
		ackcondition.SetSynced(
			rp,
			corev1.ConditionFalse,
			&condMsgCurrentlyDeleting,
			nil,
		)
		// Need to return a requeue error here, otherwise:
		// - reconciler.deleteResource() marks the resource unmanaged
		// - reconciler.HandleReconcileError() does not update status for unmanaged resource
		// - reconciler.handleRequeues() is not invoked for delete code path.
		// TODO: return err as nil when reconciler is updated.
		return rp, requeueWaitWhileDeleting
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteReplicationGroupInput, error) {
	res := &svcsdk.DeleteReplicationGroupInput{}

	if r.ko.Spec.ReplicationGroupID != nil {
		res.SetReplicationGroupId(*r.ko.Spec.ReplicationGroupID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ReplicationGroup,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameter",
		"InvalidParameterValue",
		"InvalidParameterCombination",
		"InsufficientCacheClusterCapacity",
		"ClusterQuotaForCustomerExceeded",
		"NodeQuotaForClusterExceeded",
		"NodeQuotaForCustomerExceeded",
		"InvalidVPCNetworkStateFault",
		"TagQuotaPerResourceExceeded",
		"NodeGroupsPerReplicationGroupQuotaExceeded",
		"InvalidCacheSecurityGroupState",
		"InvalidKMSKeyFault":
		return true
	default:
		return false
	}
}

// This method copies the data from given ReplicationGroup by populating it
// into copy of supplied resource and returns that.
func (rm *resourceManager) setReplicationGroupOutput(
	r *resource,
	obj *svcsdk.ReplicationGroup,
) (*resource, error) {
	if obj == nil ||
		r == nil ||
		r.ko == nil {
		return nil, nil
	}
	resp := &svcsdk.CreateReplicationGroupOutput{ReplicationGroup: obj}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.ReplicationGroup.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.ReplicationGroup.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ReplicationGroup.AtRestEncryptionEnabled != nil {
		ko.Spec.AtRestEncryptionEnabled = resp.ReplicationGroup.AtRestEncryptionEnabled
	} else {
		ko.Spec.AtRestEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenEnabled != nil {
		ko.Status.AuthTokenEnabled = resp.ReplicationGroup.AuthTokenEnabled
	} else {
		ko.Status.AuthTokenEnabled = nil
	}
	if resp.ReplicationGroup.AuthTokenLastModifiedDate != nil {
		ko.Status.AuthTokenLastModifiedDate = &metav1.Time{*resp.ReplicationGroup.AuthTokenLastModifiedDate}
	} else {
		ko.Status.AuthTokenLastModifiedDate = nil
	}
	if resp.ReplicationGroup.AutoMinorVersionUpgrade != nil {
		ko.Status.AutoMinorVersionUpgrade = resp.ReplicationGroup.AutoMinorVersionUpgrade
	} else {
		ko.Status.AutoMinorVersionUpgrade = nil
	}
	if resp.ReplicationGroup.AutomaticFailover != nil {
		ko.Status.AutomaticFailover = resp.ReplicationGroup.AutomaticFailover
	} else {
		ko.Status.AutomaticFailover = nil
	}
	if resp.ReplicationGroup.CacheNodeType != nil {
		ko.Spec.CacheNodeType = resp.ReplicationGroup.CacheNodeType
	} else {
		ko.Spec.CacheNodeType = nil
	}
	if resp.ReplicationGroup.ClusterEnabled != nil {
		ko.Status.ClusterEnabled = resp.ReplicationGroup.ClusterEnabled
	} else {
		ko.Status.ClusterEnabled = nil
	}
	if resp.ReplicationGroup.ConfigurationEndpoint != nil {
		f8 := &svcapitypes.Endpoint{}
		if resp.ReplicationGroup.ConfigurationEndpoint.Address != nil {
			f8.Address = resp.ReplicationGroup.ConfigurationEndpoint.Address
		}
		if resp.ReplicationGroup.ConfigurationEndpoint.Port != nil {
			f8.Port = resp.ReplicationGroup.ConfigurationEndpoint.Port
		}
		ko.Status.ConfigurationEndpoint = f8
	} else {
		ko.Status.ConfigurationEndpoint = nil
	}
	if resp.ReplicationGroup.DataTiering != nil {
		ko.Status.DataTiering = resp.ReplicationGroup.DataTiering
	} else {
		ko.Status.DataTiering = nil
	}
	if resp.ReplicationGroup.Description != nil {
		ko.Spec.Description = resp.ReplicationGroup.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.ReplicationGroup.GlobalReplicationGroupInfo != nil {
		f11 := &svcapitypes.GlobalReplicationGroupInfo{}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId != nil {
			f11.GlobalReplicationGroupID = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupId
		}
		if resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole != nil {
			f11.GlobalReplicationGroupMemberRole = resp.ReplicationGroup.GlobalReplicationGroupInfo.GlobalReplicationGroupMemberRole
		}
		ko.Status.GlobalReplicationGroupInfo = f11
	} else {
		ko.Status.GlobalReplicationGroupInfo = nil
	}
	if resp.ReplicationGroup.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.ReplicationGroup.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.ReplicationGroup.LogDeliveryConfigurations != nil {
		f13 := []*svcapitypes.LogDeliveryConfigurationRequest{}
		for _, f13iter := range resp.ReplicationGroup.LogDeliveryConfigurations {
			f13elem := &svcapitypes.LogDeliveryConfigurationRequest{}
			if f13iter.DestinationDetails != nil {
				f13elemf0 := &svcapitypes.DestinationDetails{}
				if f13iter.DestinationDetails.CloudWatchLogsDetails != nil {
					f13elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
					if f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
						f13elemf0f0.LogGroup = f13iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
					}
					f13elemf0.CloudWatchLogsDetails = f13elemf0f0
				}
				if f13iter.DestinationDetails.KinesisFirehoseDetails != nil {
					f13elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
					if f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
						f13elemf0f1.DeliveryStream = f13iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
					}
					f13elemf0.KinesisFirehoseDetails = f13elemf0f1
				}
				f13elem.DestinationDetails = f13elemf0
			}
			if f13iter.DestinationType != nil {
				f13elem.DestinationType = f13iter.DestinationType
			}
			if f13iter.LogFormat != nil {
				f13elem.LogFormat = f13iter.LogFormat
			}
			if f13iter.LogType != nil {
				f13elem.LogType = f13iter.LogType
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LogDeliveryConfigurations = f13
	} else {
		ko.Spec.LogDeliveryConfigurations = nil
	}
	if resp.ReplicationGroup.MemberClusters != nil {
		f14 := []*string{}
		for _, f14iter := range resp.ReplicationGroup.MemberClusters {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		ko.Status.MemberClusters = f14
	} else {
		ko.Status.MemberClusters = nil
	}
	if resp.ReplicationGroup.MemberClustersOutpostArns != nil {
		f15 := []*string{}
		for _, f15iter := range resp.ReplicationGroup.MemberClustersOutpostArns {
			var f15elem string
			f15elem = *f15iter
			f15 = append(f15, &f15elem)
		}
		ko.Status.MemberClustersOutpostARNs = f15
	} else {
		ko.Status.MemberClustersOutpostARNs = nil
	}
	if resp.ReplicationGroup.MultiAZ != nil {
		ko.Status.MultiAZ = resp.ReplicationGroup.MultiAZ
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.ReplicationGroup.NodeGroups != nil {
		f17 := []*svcapitypes.NodeGroup{}
		for _, f17iter := range resp.ReplicationGroup.NodeGroups {
			f17elem := &svcapitypes.NodeGroup{}
			if f17iter.NodeGroupId != nil {
				f17elem.NodeGroupID = f17iter.NodeGroupId
			}
			if f17iter.NodeGroupMembers != nil {
				f17elemf1 := []*svcapitypes.NodeGroupMember{}
				for _, f17elemf1iter := range f17iter.NodeGroupMembers {
					f17elemf1elem := &svcapitypes.NodeGroupMember{}
					if f17elemf1iter.CacheClusterId != nil {
						f17elemf1elem.CacheClusterID = f17elemf1iter.CacheClusterId
					}
					if f17elemf1iter.CacheNodeId != nil {
						f17elemf1elem.CacheNodeID = f17elemf1iter.CacheNodeId
					}
					if f17elemf1iter.CurrentRole != nil {
						f17elemf1elem.CurrentRole = f17elemf1iter.CurrentRole
					}
					if f17elemf1iter.PreferredAvailabilityZone != nil {
						f17elemf1elem.PreferredAvailabilityZone = f17elemf1iter.PreferredAvailabilityZone
					}
					if f17elemf1iter.PreferredOutpostArn != nil {
						f17elemf1elem.PreferredOutpostARN = f17elemf1iter.PreferredOutpostArn
					}
					if f17elemf1iter.ReadEndpoint != nil {
						f17elemf1elemf5 := &svcapitypes.Endpoint{}
						if f17elemf1iter.ReadEndpoint.Address != nil {
							f17elemf1elemf5.Address = f17elemf1iter.ReadEndpoint.Address
						}
						if f17elemf1iter.ReadEndpoint.Port != nil {
							f17elemf1elemf5.Port = f17elemf1iter.ReadEndpoint.Port
						}
						f17elemf1elem.ReadEndpoint = f17elemf1elemf5
					}
					f17elemf1 = append(f17elemf1, f17elemf1elem)
				}
				f17elem.NodeGroupMembers = f17elemf1
			}
			if f17iter.PrimaryEndpoint != nil {
				f17elemf2 := &svcapitypes.Endpoint{}
				if f17iter.PrimaryEndpoint.Address != nil {
					f17elemf2.Address = f17iter.PrimaryEndpoint.Address
				}
				if f17iter.PrimaryEndpoint.Port != nil {
					f17elemf2.Port = f17iter.PrimaryEndpoint.Port
				}
				f17elem.PrimaryEndpoint = f17elemf2
			}
			if f17iter.ReaderEndpoint != nil {
				f17elemf3 := &svcapitypes.Endpoint{}
				if f17iter.ReaderEndpoint.Address != nil {
					f17elemf3.Address = f17iter.ReaderEndpoint.Address
				}
				if f17iter.ReaderEndpoint.Port != nil {
					f17elemf3.Port = f17iter.ReaderEndpoint.Port
				}
				f17elem.ReaderEndpoint = f17elemf3
			}
			if f17iter.Slots != nil {
				f17elem.Slots = f17iter.Slots
			}
			if f17iter.Status != nil {
				f17elem.Status = f17iter.Status
			}
			f17 = append(f17, f17elem)
		}
		ko.Status.NodeGroups = f17
	} else {
		ko.Status.NodeGroups = nil
	}
	if resp.ReplicationGroup.PendingModifiedValues != nil {
		f18 := &svcapitypes.ReplicationGroupPendingModifiedValues{}
		if resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus != nil {
			f18.AuthTokenStatus = resp.ReplicationGroup.PendingModifiedValues.AuthTokenStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus != nil {
			f18.AutomaticFailoverStatus = resp.ReplicationGroup.PendingModifiedValues.AutomaticFailoverStatus
		}
		if resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations != nil {
			f18f2 := []*svcapitypes.PendingLogDeliveryConfiguration{}
			for _, f18f2iter := range resp.ReplicationGroup.PendingModifiedValues.LogDeliveryConfigurations {
				f18f2elem := &svcapitypes.PendingLogDeliveryConfiguration{}
				if f18f2iter.DestinationDetails != nil {
					f18f2elemf0 := &svcapitypes.DestinationDetails{}
					if f18f2iter.DestinationDetails.CloudWatchLogsDetails != nil {
						f18f2elemf0f0 := &svcapitypes.CloudWatchLogsDestinationDetails{}
						if f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup != nil {
							f18f2elemf0f0.LogGroup = f18f2iter.DestinationDetails.CloudWatchLogsDetails.LogGroup
						}
						f18f2elemf0.CloudWatchLogsDetails = f18f2elemf0f0
					}
					if f18f2iter.DestinationDetails.KinesisFirehoseDetails != nil {
						f18f2elemf0f1 := &svcapitypes.KinesisFirehoseDestinationDetails{}
						if f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream != nil {
							f18f2elemf0f1.DeliveryStream = f18f2iter.DestinationDetails.KinesisFirehoseDetails.DeliveryStream
						}
						f18f2elemf0.KinesisFirehoseDetails = f18f2elemf0f1
					}
					f18f2elem.DestinationDetails = f18f2elemf0
				}
				if f18f2iter.DestinationType != nil {
					f18f2elem.DestinationType = f18f2iter.DestinationType
				}
				if f18f2iter.LogFormat != nil {
					f18f2elem.LogFormat = f18f2iter.LogFormat
				}
				if f18f2iter.LogType != nil {
					f18f2elem.LogType = f18f2iter.LogType
				}
				f18f2 = append(f18f2, f18f2elem)
			}
			f18.LogDeliveryConfigurations = f18f2
		}
		if resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId != nil {
			f18.PrimaryClusterID = resp.ReplicationGroup.PendingModifiedValues.PrimaryClusterId
		}
		if resp.ReplicationGroup.PendingModifiedValues.Resharding != nil {
			f18f4 := &svcapitypes.ReshardingStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration != nil {
				f18f4f0 := &svcapitypes.SlotMigration{}
				if resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage != nil {
					f18f4f0.ProgressPercentage = resp.ReplicationGroup.PendingModifiedValues.Resharding.SlotMigration.ProgressPercentage
				}
				f18f4.SlotMigration = f18f4f0
			}
			f18.Resharding = f18f4
		}
		if resp.ReplicationGroup.PendingModifiedValues.UserGroups != nil {
			f18f5 := &svcapitypes.UserGroupsUpdateStatus{}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd != nil {
				f18f5f0 := []*string{}
				for _, f18f5f0iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToAdd {
					var f18f5f0elem string
					f18f5f0elem = *f18f5f0iter
					f18f5f0 = append(f18f5f0, &f18f5f0elem)
				}
				f18f5.UserGroupIDsToAdd = f18f5f0
			}
			if resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove != nil {
				f18f5f1 := []*string{}
				for _, f18f5f1iter := range resp.ReplicationGroup.PendingModifiedValues.UserGroups.UserGroupIdsToRemove {
					var f18f5f1elem string
					f18f5f1elem = *f18f5f1iter
					f18f5f1 = append(f18f5f1, &f18f5f1elem)
				}
				f18f5.UserGroupIDsToRemove = f18f5f1
			}
			f18.UserGroups = f18f5
		}
		ko.Status.PendingModifiedValues = f18
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.ReplicationGroup.ReplicationGroupCreateTime != nil {
		ko.Status.ReplicationGroupCreateTime = &metav1.Time{*resp.ReplicationGroup.ReplicationGroupCreateTime}
	} else {
		ko.Status.ReplicationGroupCreateTime = nil
	}
	if resp.ReplicationGroup.ReplicationGroupId != nil {
		ko.Spec.ReplicationGroupID = resp.ReplicationGroup.ReplicationGroupId
	} else {
		ko.Spec.ReplicationGroupID = nil
	}
	if resp.ReplicationGroup.SnapshotRetentionLimit != nil {
		ko.Spec.SnapshotRetentionLimit = resp.ReplicationGroup.SnapshotRetentionLimit
	} else {
		ko.Spec.SnapshotRetentionLimit = nil
	}
	if resp.ReplicationGroup.SnapshotWindow != nil {
		ko.Spec.SnapshotWindow = resp.ReplicationGroup.SnapshotWindow
	} else {
		ko.Spec.SnapshotWindow = nil
	}
	if resp.ReplicationGroup.SnapshottingClusterId != nil {
		ko.Status.SnapshottingClusterID = resp.ReplicationGroup.SnapshottingClusterId
	} else {
		ko.Status.SnapshottingClusterID = nil
	}
	if resp.ReplicationGroup.Status != nil {
		ko.Status.Status = resp.ReplicationGroup.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.ReplicationGroup.TransitEncryptionEnabled != nil {
		ko.Spec.TransitEncryptionEnabled = resp.ReplicationGroup.TransitEncryptionEnabled
	} else {
		ko.Spec.TransitEncryptionEnabled = nil
	}
	if resp.ReplicationGroup.UserGroupIds != nil {
		f26 := []*string{}
		for _, f26iter := range resp.ReplicationGroup.UserGroupIds {
			var f26elem string
			f26elem = *f26iter
			f26 = append(f26, &f26elem)
		}
		ko.Spec.UserGroupIDs = f26
	} else {
		ko.Spec.UserGroupIDs = nil
	}

	rm.setStatusDefaults(ko)
	rm.customSetOutput(obj, ko) // custom set output from obj
	return &resource{ko}, nil
}
